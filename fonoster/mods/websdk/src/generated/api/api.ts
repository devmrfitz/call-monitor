/* tslint:disable */
/* eslint-disable */
/**
 * Fonoster
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: psanders@fonoster.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Agent
 */
export interface Agent {
    /**
     * 
     * @type {string}
     * @memberof Agent
     */
    'ref'?: string;
    /**
     * 
     * @type {string}
     * @memberof Agent
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Agent
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof Agent
     */
    'secret': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Agent
     */
    'domains': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Agent
     */
    'privacy'?: string;
    /**
     * 
     * @type {string}
     * @memberof Agent
     */
    'createTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Agent
     */
    'updateTime'?: string;
}
/**
 * 
 * @export
 * @interface CallRequest
 */
export interface CallRequest {
    /**
     * 
     * @type {string}
     * @memberof CallRequest
     */
    'from'?: string;
    /**
     * 
     * @type {string}
     * @memberof CallRequest
     */
    'to'?: string;
    /**
     * 
     * @type {string}
     * @memberof CallRequest
     */
    'webhook'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CallRequest
     */
    'ignoreE164Validation'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CallRequest
     */
    'metadata'?: string;
}
/**
 * 
 * @export
 * @interface CallResponse
 */
export interface CallResponse {
    /**
     * 
     * @type {string}
     * @memberof CallResponse
     */
    'ref'?: string;
}
/**
 * 
 * @export
 * @interface CreateAgentRequest
 */
export interface CreateAgentRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateAgentRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateAgentRequest
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof CreateAgentRequest
     */
    'secret': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateAgentRequest
     */
    'domains': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CreateAgentRequest
     */
    'privacy'?: string;
}
/**
 * 
 * @export
 * @interface CreateDomainRequest
 */
export interface CreateDomainRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateDomainRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateDomainRequest
     */
    'domainUri': string;
    /**
     * 
     * @type {string}
     * @memberof CreateDomainRequest
     */
    'egressRule'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateDomainRequest
     */
    'egressNumberRef'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateDomainRequest
     */
    'accessDeny'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateDomainRequest
     */
    'accessAllow'?: Array<string>;
}
/**
 * 
 * @export
 * @interface CreateNumberRequest
 */
export interface CreateNumberRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateNumberRequest
     */
    'providerRef': string;
    /**
     * 
     * @type {string}
     * @memberof CreateNumberRequest
     */
    'e164Number': string;
    /**
     * 
     * @type {string}
     * @memberof CreateNumberRequest
     */
    'aorLink'?: string;
    /**
     * 
     * @type {IngressInfo}
     * @memberof CreateNumberRequest
     */
    'ingressInfo'?: IngressInfo;
}
/**
 * 
 * @export
 * @interface CreateProjectRequest
 */
export interface CreateProjectRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateProjectRequest
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateProjectRequest
     */
    'allowExperiments'?: boolean;
}
/**
 * 
 * @export
 * @interface CreateProviderRequest
 */
export interface CreateProviderRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateProviderRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProviderRequest
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProviderRequest
     */
    'secret': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProviderRequest
     */
    'host': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProviderRequest
     */
    'transport': string;
    /**
     * 
     * @type {number}
     * @memberof CreateProviderRequest
     */
    'expires'?: number;
}
/**
 * 
 * @export
 * @interface CreateRegistryTokenResponse
 */
export interface CreateRegistryTokenResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateRegistryTokenResponse
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateRegistryTokenResponse
     */
    'image'?: string;
}
/**
 * 
 * @export
 * @interface CreateSecretRequest
 */
export interface CreateSecretRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateSecretRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateSecretRequest
     */
    'secret'?: string;
}
/**
 * 
 * @export
 * @interface CreateSecretResponse
 */
export interface CreateSecretResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateSecretResponse
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface CreateTokenRequest
 */
export interface CreateTokenRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateTokenRequest
     */
    'roleName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateTokenRequest
     */
    'accessKeyId': string;
    /**
     * 
     * @type {string}
     * @memberof CreateTokenRequest
     */
    'expiration'?: string;
}
/**
 * 
 * @export
 * @interface CreateTokenResponse
 */
export interface CreateTokenResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateTokenResponse
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface CreateUserCredentialsRequest
 */
export interface CreateUserCredentialsRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateUserCredentialsRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserCredentialsRequest
     */
    'secret'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserCredentialsRequest
     */
    'expiration'?: string;
}
/**
 * 
 * @export
 * @interface CreateUserCredentialsResponse
 */
export interface CreateUserCredentialsResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateUserCredentialsResponse
     */
    'accessKeyId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserCredentialsResponse
     */
    'accessKeySecret'?: string;
}
/**
 * 
 * @export
 * @interface CreateUserRequest
 */
export interface CreateUserRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    'secret': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    'avatar'?: string;
}
/**
 * 
 * @export
 * @interface DeployStream
 */
export interface DeployStream {
    /**
     * 
     * @type {string}
     * @memberof DeployStream
     */
    'text'?: string;
}
/**
 * 
 * @export
 * @interface Domain
 */
export interface Domain {
    /**
     * 
     * @type {string}
     * @memberof Domain
     */
    'ref'?: string;
    /**
     * 
     * @type {string}
     * @memberof Domain
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Domain
     */
    'domainUri': string;
    /**
     * 
     * @type {string}
     * @memberof Domain
     */
    'egressRule'?: string;
    /**
     * 
     * @type {string}
     * @memberof Domain
     */
    'egressNumberRef'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Domain
     */
    'accessDeny'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Domain
     */
    'accessAllow'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Domain
     */
    'createTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Domain
     */
    'updateTime'?: string;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {number}
     * @memberof ErrorResponse
     */
    'status'?: number;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface Func
 */
export interface Func {
    /**
     * 
     * @type {string}
     * @memberof Func
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Func
     */
    'image'?: string;
    /**
     * 
     * @type {number}
     * @memberof Func
     */
    'invocationCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof Func
     */
    'replicas'?: number;
    /**
     * 
     * @type {number}
     * @memberof Func
     */
    'availableReplicas'?: number;
    /**
     * 
     * @type {Resource}
     * @memberof Func
     */
    'limits'?: Resource;
    /**
     * 
     * @type {Resource}
     * @memberof Func
     */
    'requests'?: Resource;
    /**
     * 
     * @type {string}
     * @memberof Func
     */
    'schedule'?: string;
}
/**
 * 
 * @export
 * @interface FuncLog
 */
export interface FuncLog {
    /**
     * 
     * @type {string}
     * @memberof FuncLog
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof FuncLog
     */
    'instance'?: string;
    /**
     * 
     * @type {string}
     * @memberof FuncLog
     */
    'timestamp'?: string;
    /**
     * 
     * @type {string}
     * @memberof FuncLog
     */
    'text'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum GetObjectURLRequestBucket {
    Apps = 'APPS',
    Recordings = 'RECORDINGS',
    Public = 'PUBLIC'
}

/**
 * 
 * @export
 * @interface GetObjectURLResponse
 */
export interface GetObjectURLResponse {
    /**
     * 
     * @type {string}
     * @memberof GetObjectURLResponse
     */
    'url'?: string;
}
/**
 * 
 * @export
 * @interface GetSecretResponse
 */
export interface GetSecretResponse {
    /**
     * 
     * @type {string}
     * @memberof GetSecretResponse
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetSecretResponse
     */
    'secret'?: string;
}
/**
 * 
 * @export
 * @interface IngressInfo
 */
export interface IngressInfo {
    /**
     * 
     * @type {string}
     * @memberof IngressInfo
     */
    'accessKeyId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IngressInfo
     */
    'webhook'?: string;
}
/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * 
     * @type {string}
     * @memberof InlineObject
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject
     */
    'secret'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineObject
     */
    'domains'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof InlineObject
     */
    'privacy'?: string;
}
/**
 * 
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject1
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject1
     */
    'egressRule'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject1
     */
    'egressNumberRef'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineObject1
     */
    'accessDeny'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineObject1
     */
    'accessAllow'?: Array<string>;
}
/**
 * 
 * @export
 * @interface InlineObject2
 */
export interface InlineObject2 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject2
     */
    'aorLink'?: string;
    /**
     * 
     * @type {IngressInfo}
     * @memberof InlineObject2
     */
    'ingressInfo'?: IngressInfo;
}
/**
 * 
 * @export
 * @interface InlineObject3
 */
export interface InlineObject3 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject3
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject3
     */
    'allowExperiments': boolean;
}
/**
 * 
 * @export
 * @interface InlineObject4
 */
export interface InlineObject4 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject4
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject4
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject4
     */
    'secret': string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject4
     */
    'host': string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject4
     */
    'transport': string;
    /**
     * 
     * @type {number}
     * @memberof InlineObject4
     */
    'expires'?: number;
}
/**
 * 
 * @export
 * @interface InlineObject5
 */
export interface InlineObject5 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject5
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject5
     */
    'secret'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject5
     */
    'avatar'?: string;
}
/**
 * 
 * @export
 * @interface ListAgentsResponse
 */
export interface ListAgentsResponse {
    /**
     * 
     * @type {Array<Agent>}
     * @memberof ListAgentsResponse
     */
    'agents'?: Array<Agent>;
    /**
     * 
     * @type {string}
     * @memberof ListAgentsResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface ListDomainsResponse
 */
export interface ListDomainsResponse {
    /**
     * 
     * @type {Array<Domain>}
     * @memberof ListDomainsResponse
     */
    'domains'?: Array<Domain>;
    /**
     * 
     * @type {string}
     * @memberof ListDomainsResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface ListFuncsResponse
 */
export interface ListFuncsResponse {
    /**
     * 
     * @type {Array<Func>}
     * @memberof ListFuncsResponse
     */
    'funcs'?: Array<Func>;
    /**
     * 
     * @type {string}
     * @memberof ListFuncsResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface ListNumbersResponse
 */
export interface ListNumbersResponse {
    /**
     * 
     * @type {Array<Number>}
     * @memberof ListNumbersResponse
     */
    'numbers'?: Array<Number>;
    /**
     * Token to retrieve the next page of results, or empty if there are no more results in the list.
     * @type {string}
     * @memberof ListNumbersResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface ListProjectsResponse
 */
export interface ListProjectsResponse {
    /**
     * 
     * @type {Array<Project>}
     * @memberof ListProjectsResponse
     */
    'projects'?: Array<Project>;
}
/**
 * 
 * @export
 * @interface ListProvidersResponse
 */
export interface ListProvidersResponse {
    /**
     * 
     * @type {Array<Provider>}
     * @memberof ListProvidersResponse
     */
    'providers'?: Array<Provider>;
    /**
     * 
     * @type {string}
     * @memberof ListProvidersResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface ListSecretIdResponse
 */
export interface ListSecretIdResponse {
    /**
     * 
     * @type {Array<SecretName>}
     * @memberof ListSecretIdResponse
     */
    'secrets'?: Array<SecretName>;
    /**
     * 
     * @type {string}
     * @memberof ListSecretIdResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface ListUsersResponse
 */
export interface ListUsersResponse {
    /**
     * 
     * @type {Array<User>}
     * @memberof ListUsersResponse
     */
    'users'?: Array<User>;
}
/**
 * 
 * @export
 * @interface Number
 */
export interface Number {
    /**
     * 
     * @type {string}
     * @memberof Number
     */
    'ref'?: string;
    /**
     * 
     * @type {string}
     * @memberof Number
     */
    'providerRef': string;
    /**
     * 
     * @type {string}
     * @memberof Number
     */
    'e164Number': string;
    /**
     * 
     * @type {string}
     * @memberof Number
     */
    'aorLink'?: string;
    /**
     * 
     * @type {IngressInfo}
     * @memberof Number
     */
    'ingressInfo'?: IngressInfo;
    /**
     * 
     * @type {string}
     * @memberof Number
     */
    'createTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Number
     */
    'updateTime'?: string;
}
/**
 * 
 * @export
 * @interface Project
 */
export interface Project {
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'ref': string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'userRef': string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'accessKeyId': string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'accessKeySecret': string;
    /**
     * 
     * @type {boolean}
     * @memberof Project
     */
    'allowExperiments'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'createTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'updateTime'?: string;
}
/**
 * 
 * @export
 * @interface Provider
 */
export interface Provider {
    /**
     * 
     * @type {string}
     * @memberof Provider
     */
    'ref'?: string;
    /**
     * 
     * @type {string}
     * @memberof Provider
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Provider
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof Provider
     */
    'secret': string;
    /**
     * 
     * @type {string}
     * @memberof Provider
     */
    'host': string;
    /**
     * 
     * @type {string}
     * @memberof Provider
     */
    'transport': string;
    /**
     * 
     * @type {number}
     * @memberof Provider
     */
    'expires'?: number;
    /**
     * 
     * @type {string}
     * @memberof Provider
     */
    'createTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Provider
     */
    'updateTime'?: string;
}
/**
 * 
 * @export
 * @interface RenewAccessKeySecretResponse
 */
export interface RenewAccessKeySecretResponse {
    /**
     * 
     * @type {string}
     * @memberof RenewAccessKeySecretResponse
     */
    'accessKeySecret'?: string;
}
/**
 * 
 * @export
 * @interface Resource
 */
export interface Resource {
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    'memory'?: string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    'cpu'?: string;
}
/**
 * 
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'description'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Role
     */
    'access'?: Array<string>;
}
/**
 * 
 * @export
 * @interface SecretName
 */
export interface SecretName {
    /**
     * 
     * @type {string}
     * @memberof SecretName
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum UploadObjectRequestBucket {
    Apps = 'APPS',
    Recordings = 'RECORDINGS',
    Public = 'PUBLIC',
    Funcs = 'FUNCS'
}

/**
 * 
 * @export
 * @interface UploadObjectResponse
 */
export interface UploadObjectResponse {
    /**
     * 
     * @type {number}
     * @memberof UploadObjectResponse
     */
    'size'?: number;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'ref': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'accessKeyId': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'avatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'createTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'updateTime'?: string;
}
/**
 * 
 * @export
 * @interface ValidateTokenResponse
 */
export interface ValidateTokenResponse {
    /**
     * 
     * @type {boolean}
     * @memberof ValidateTokenResponse
     */
    'valid'?: boolean;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum View {
    Basic = 'BASIC',
    Standard = 'STANDARD',
    Full = 'FULL'
}


/**
 * AgentsApi - axios parameter creator
 * @export
 */
export const AgentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a new Agent resource
         * @param {CreateAgentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAgent: async (body: CreateAgentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createAgent', 'body', body)
            const localVarPath = `/v1beta1/agents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hard delete of an Agent resource
         * @param {string} ref Agent\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAgent: async (ref: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ref' is not null or undefined
            assertParamExists('deleteAgent', 'ref', ref)
            const localVarPath = `/v1beta1/agents/{ref}`
                .replace(`{${"ref"}}`, encodeURIComponent(String(ref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets Agent by reference
         * @param {string} ref Agent\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgent: async (ref: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ref' is not null or undefined
            assertParamExists('getAgent', 'ref', ref)
            const localVarPath = `/v1beta1/agents/{ref}`
                .replace(`{${"ref"}}`, encodeURIComponent(String(ref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lists Agents from the SIP Proxy subsystem
         * @param {number} [pageSize] The maximum number of items in the list.
         * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities (reserved).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAgents: async (pageSize?: number, pageToken?: string, view?: 'BASIC' | 'STANDARD' | 'FULL', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1beta1/agents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }

            if (view !== undefined) {
                localVarQueryParameter['view'] = view;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Change or update fields in a resource
         * @param {string} ref Agent\&#39;s reference
         * @param {InlineObject} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgent: async (ref: string, body: InlineObject, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ref' is not null or undefined
            assertParamExists('updateAgent', 'ref', ref)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateAgent', 'body', body)
            const localVarPath = `/v1beta1/agents/{ref}`
                .replace(`{${"ref"}}`, encodeURIComponent(String(ref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AgentsApi - functional programming interface
 * @export
 */
export const AgentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AgentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates a new Agent resource
         * @param {CreateAgentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAgent(body: CreateAgentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Agent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAgent(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Hard delete of an Agent resource
         * @param {string} ref Agent\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAgent(ref: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAgent(ref, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets Agent by reference
         * @param {string} ref Agent\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAgent(ref: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Agent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAgent(ref, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Lists Agents from the SIP Proxy subsystem
         * @param {number} [pageSize] The maximum number of items in the list.
         * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities (reserved).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAgents(pageSize?: number, pageToken?: string, view?: 'BASIC' | 'STANDARD' | 'FULL', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListAgentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAgents(pageSize, pageToken, view, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Change or update fields in a resource
         * @param {string} ref Agent\&#39;s reference
         * @param {InlineObject} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAgent(ref: string, body: InlineObject, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Agent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAgent(ref, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AgentsApi - factory interface
 * @export
 */
export const AgentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AgentsApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates a new Agent resource
         * @param {CreateAgentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAgent(body: CreateAgentRequest, options?: any): AxiosPromise<Agent> {
            return localVarFp.createAgent(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hard delete of an Agent resource
         * @param {string} ref Agent\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAgent(ref: string, options?: any): AxiosPromise<object> {
            return localVarFp.deleteAgent(ref, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets Agent by reference
         * @param {string} ref Agent\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgent(ref: string, options?: any): AxiosPromise<Agent> {
            return localVarFp.getAgent(ref, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lists Agents from the SIP Proxy subsystem
         * @param {number} [pageSize] The maximum number of items in the list.
         * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities (reserved).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAgents(pageSize?: number, pageToken?: string, view?: 'BASIC' | 'STANDARD' | 'FULL', options?: any): AxiosPromise<ListAgentsResponse> {
            return localVarFp.listAgents(pageSize, pageToken, view, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Change or update fields in a resource
         * @param {string} ref Agent\&#39;s reference
         * @param {InlineObject} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgent(ref: string, body: InlineObject, options?: any): AxiosPromise<Agent> {
            return localVarFp.updateAgent(ref, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AgentsApi - object-oriented interface
 * @export
 * @class AgentsApi
 * @extends {BaseAPI}
 */
export class AgentsApi extends BaseAPI {
    /**
     * 
     * @summary Creates a new Agent resource
     * @param {CreateAgentRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    public createAgent(body: CreateAgentRequest, options?: AxiosRequestConfig) {
        return AgentsApiFp(this.configuration).createAgent(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hard delete of an Agent resource
     * @param {string} ref Agent\&#39;s reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    public deleteAgent(ref: string, options?: AxiosRequestConfig) {
        return AgentsApiFp(this.configuration).deleteAgent(ref, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets Agent by reference
     * @param {string} ref Agent\&#39;s reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    public getAgent(ref: string, options?: AxiosRequestConfig) {
        return AgentsApiFp(this.configuration).getAgent(ref, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lists Agents from the SIP Proxy subsystem
     * @param {number} [pageSize] The maximum number of items in the list.
     * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
     * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities (reserved).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    public listAgents(pageSize?: number, pageToken?: string, view?: 'BASIC' | 'STANDARD' | 'FULL', options?: AxiosRequestConfig) {
        return AgentsApiFp(this.configuration).listAgents(pageSize, pageToken, view, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Change or update fields in a resource
     * @param {string} ref Agent\&#39;s reference
     * @param {InlineObject} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    public updateAgent(ref: string, body: InlineObject, options?: AxiosRequestConfig) {
        return AgentsApiFp(this.configuration).updateAgent(ref, body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a new token for a given accessKeyId
         * @param {CreateTokenRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createToken: async (body: CreateTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createToken', 'body', body)
            const localVarPath = `/v1beta1/auth/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a role by name
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRole: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getRole', 'name', name)
            const localVarPath = `/v1beta1/auth/role/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Verifies if a token was issue by Fonoster
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateToken: async (token: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('validateToken', 'token', token)
            const localVarPath = `/v1beta1/auth/token/{token}`
                .replace(`{${"token"}}`, encodeURIComponent(String(token)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates a new token for a given accessKeyId
         * @param {CreateTokenRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createToken(body: CreateTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createToken(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a role by name
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRole(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRole(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Verifies if a token was issue by Fonoster
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateToken(token: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValidateTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateToken(token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates a new token for a given accessKeyId
         * @param {CreateTokenRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createToken(body: CreateTokenRequest, options?: any): AxiosPromise<CreateTokenResponse> {
            return localVarFp.createToken(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a role by name
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRole(name: string, options?: any): AxiosPromise<Role> {
            return localVarFp.getRole(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Verifies if a token was issue by Fonoster
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateToken(token: string, options?: any): AxiosPromise<ValidateTokenResponse> {
            return localVarFp.validateToken(token, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Creates a new token for a given accessKeyId
     * @param {CreateTokenRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public createToken(body: CreateTokenRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).createToken(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a role by name
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public getRole(name: string, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).getRole(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Verifies if a token was issue by Fonoster
     * @param {string} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public validateToken(token: string, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).validateToken(token, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CallManagerApi - axios parameter creator
 * @export
 */
export const CallManagerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Originates a call and pass channel to an application
         * @param {CallRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        call: async (body: CallRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('call', 'body', body)
            const localVarPath = `/v1beta1/call`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CallManagerApi - functional programming interface
 * @export
 */
export const CallManagerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CallManagerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Originates a call and pass channel to an application
         * @param {CallRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async call(body: CallRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CallResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.call(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CallManagerApi - factory interface
 * @export
 */
export const CallManagerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CallManagerApiFp(configuration)
    return {
        /**
         * 
         * @summary Originates a call and pass channel to an application
         * @param {CallRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        call(body: CallRequest, options?: any): AxiosPromise<CallResponse> {
            return localVarFp.call(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CallManagerApi - object-oriented interface
 * @export
 * @class CallManagerApi
 * @extends {BaseAPI}
 */
export class CallManagerApi extends BaseAPI {
    /**
     * 
     * @summary Originates a call and pass channel to an application
     * @param {CallRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallManagerApi
     */
    public call(body: CallRequest, options?: AxiosRequestConfig) {
        return CallManagerApiFp(this.configuration).call(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DomainsApi - axios parameter creator
 * @export
 */
export const DomainsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a new Domain resource
         * @param {CreateDomainRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDomain: async (body: CreateDomainRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createDomain', 'body', body)
            const localVarPath = `/v1beta1/domains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hard delete of a domain resource
         * @param {string} ref Domain\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDomain: async (ref: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ref' is not null or undefined
            assertParamExists('deleteDomain', 'ref', ref)
            const localVarPath = `/v1beta1/domains/{ref}`
                .replace(`{${"ref"}}`, encodeURIComponent(String(ref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a Domain by reference
         * @param {string} ref Domain\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomain: async (ref: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ref' is not null or undefined
            assertParamExists('getDomain', 'ref', ref)
            const localVarPath = `/v1beta1/domains/{ref}`
                .replace(`{${"ref"}}`, encodeURIComponent(String(ref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Change or update fields in a resource
         * @param {string} ref Domain\&#39;s reference
         * @param {InlineObject1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDomain: async (ref: string, body: InlineObject1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ref' is not null or undefined
            assertParamExists('updateDomain', 'ref', ref)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateDomain', 'body', body)
            const localVarPath = `/v1beta1/domains/{ref}`
                .replace(`{${"ref"}}`, encodeURIComponent(String(ref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DomainsApi - functional programming interface
 * @export
 */
export const DomainsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DomainsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates a new Domain resource
         * @param {CreateDomainRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDomain(body: CreateDomainRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Domain>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDomain(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Hard delete of a domain resource
         * @param {string} ref Domain\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDomain(ref: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDomain(ref, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a Domain by reference
         * @param {string} ref Domain\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDomain(ref: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Domain>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDomain(ref, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Change or update fields in a resource
         * @param {string} ref Domain\&#39;s reference
         * @param {InlineObject1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDomain(ref: string, body: InlineObject1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Domain>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDomain(ref, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DomainsApi - factory interface
 * @export
 */
export const DomainsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DomainsApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates a new Domain resource
         * @param {CreateDomainRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDomain(body: CreateDomainRequest, options?: any): AxiosPromise<Domain> {
            return localVarFp.createDomain(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hard delete of a domain resource
         * @param {string} ref Domain\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDomain(ref: string, options?: any): AxiosPromise<object> {
            return localVarFp.deleteDomain(ref, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a Domain by reference
         * @param {string} ref Domain\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomain(ref: string, options?: any): AxiosPromise<Domain> {
            return localVarFp.getDomain(ref, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Change or update fields in a resource
         * @param {string} ref Domain\&#39;s reference
         * @param {InlineObject1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDomain(ref: string, body: InlineObject1, options?: any): AxiosPromise<Domain> {
            return localVarFp.updateDomain(ref, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DomainsApi - object-oriented interface
 * @export
 * @class DomainsApi
 * @extends {BaseAPI}
 */
export class DomainsApi extends BaseAPI {
    /**
     * 
     * @summary Creates a new Domain resource
     * @param {CreateDomainRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    public createDomain(body: CreateDomainRequest, options?: AxiosRequestConfig) {
        return DomainsApiFp(this.configuration).createDomain(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hard delete of a domain resource
     * @param {string} ref Domain\&#39;s reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    public deleteDomain(ref: string, options?: AxiosRequestConfig) {
        return DomainsApiFp(this.configuration).deleteDomain(ref, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a Domain by reference
     * @param {string} ref Domain\&#39;s reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    public getDomain(ref: string, options?: AxiosRequestConfig) {
        return DomainsApiFp(this.configuration).getDomain(ref, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Change or update fields in a resource
     * @param {string} ref Domain\&#39;s reference
     * @param {InlineObject1} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    public updateDomain(ref: string, body: InlineObject1, options?: AxiosRequestConfig) {
        return DomainsApiFp(this.configuration).updateDomain(ref, body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FuncsApi - axios parameter creator
 * @export
 */
export const FuncsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Peforms a hard delete of the function
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFunc: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deleteFunc', 'name', name)
            const localVarPath = `/v1beta1/funcs/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a function by name
         * @param {string} name 
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Requested level of detail.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFunc: async (name: string, view?: 'BASIC' | 'STANDARD' | 'FULL', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getFunc', 'name', name)
            const localVarPath = `/v1beta1/funcs/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)

            if (view !== undefined) {
                localVarQueryParameter['view'] = view;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a stream of logs
         * @param {string} name 
         * @param {string} [since] Only return logs after a specific date (RFC3339).
         * @param {number} [tail] 
         * @param {boolean} [follow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFuncLogs: async (name: string, since?: string, tail?: number, follow?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getFuncLogs', 'name', name)
            const localVarPath = `/v1beta1/funcs/{name}/logs`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (tail !== undefined) {
                localVarQueryParameter['tail'] = tail;
            }

            if (follow !== undefined) {
                localVarQueryParameter['follow'] = follow;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Shows a list of user functions
         * @param {number} [pageSize] The maximum number of items in the list.
         * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFuncs: async (pageSize?: number, pageToken?: string, view?: 'BASIC' | 'STANDARD' | 'FULL', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1beta1/funcs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }

            if (view !== undefined) {
                localVarQueryParameter['view'] = view;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FuncsApi - functional programming interface
 * @export
 */
export const FuncsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FuncsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Peforms a hard delete of the function
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFunc(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFunc(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a function by name
         * @param {string} name 
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Requested level of detail.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFunc(name: string, view?: 'BASIC' | 'STANDARD' | 'FULL', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Func>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFunc(name, view, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a stream of logs
         * @param {string} name 
         * @param {string} [since] Only return logs after a specific date (RFC3339).
         * @param {number} [tail] 
         * @param {boolean} [follow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFuncLogs(name: string, since?: string, tail?: number, follow?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FuncLog>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFuncLogs(name, since, tail, follow, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Shows a list of user functions
         * @param {number} [pageSize] The maximum number of items in the list.
         * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFuncs(pageSize?: number, pageToken?: string, view?: 'BASIC' | 'STANDARD' | 'FULL', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListFuncsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFuncs(pageSize, pageToken, view, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FuncsApi - factory interface
 * @export
 */
export const FuncsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FuncsApiFp(configuration)
    return {
        /**
         * 
         * @summary Peforms a hard delete of the function
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFunc(name: string, options?: any): AxiosPromise<object> {
            return localVarFp.deleteFunc(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a function by name
         * @param {string} name 
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Requested level of detail.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFunc(name: string, view?: 'BASIC' | 'STANDARD' | 'FULL', options?: any): AxiosPromise<Func> {
            return localVarFp.getFunc(name, view, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a stream of logs
         * @param {string} name 
         * @param {string} [since] Only return logs after a specific date (RFC3339).
         * @param {number} [tail] 
         * @param {boolean} [follow] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFuncLogs(name: string, since?: string, tail?: number, follow?: boolean, options?: any): AxiosPromise<FuncLog> {
            return localVarFp.getFuncLogs(name, since, tail, follow, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Shows a list of user functions
         * @param {number} [pageSize] The maximum number of items in the list.
         * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFuncs(pageSize?: number, pageToken?: string, view?: 'BASIC' | 'STANDARD' | 'FULL', options?: any): AxiosPromise<ListFuncsResponse> {
            return localVarFp.listFuncs(pageSize, pageToken, view, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FuncsApi - object-oriented interface
 * @export
 * @class FuncsApi
 * @extends {BaseAPI}
 */
export class FuncsApi extends BaseAPI {
    /**
     * 
     * @summary Peforms a hard delete of the function
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuncsApi
     */
    public deleteFunc(name: string, options?: AxiosRequestConfig) {
        return FuncsApiFp(this.configuration).deleteFunc(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a function by name
     * @param {string} name 
     * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Requested level of detail.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuncsApi
     */
    public getFunc(name: string, view?: 'BASIC' | 'STANDARD' | 'FULL', options?: AxiosRequestConfig) {
        return FuncsApiFp(this.configuration).getFunc(name, view, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a stream of logs
     * @param {string} name 
     * @param {string} [since] Only return logs after a specific date (RFC3339).
     * @param {number} [tail] 
     * @param {boolean} [follow] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuncsApi
     */
    public getFuncLogs(name: string, since?: string, tail?: number, follow?: boolean, options?: AxiosRequestConfig) {
        return FuncsApiFp(this.configuration).getFuncLogs(name, since, tail, follow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Shows a list of user functions
     * @param {number} [pageSize] The maximum number of items in the list.
     * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
     * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuncsApi
     */
    public listFuncs(pageSize?: number, pageToken?: string, view?: 'BASIC' | 'STANDARD' | 'FULL', options?: AxiosRequestConfig) {
        return FuncsApiFp(this.configuration).listFuncs(pageSize, pageToken, view, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NumbersApi - axios parameter creator
 * @export
 */
export const NumbersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a new Number resource
         * @param {CreateNumberRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNumber: async (body: CreateNumberRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createNumber', 'body', body)
            const localVarPath = `/v1beta1/numbers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hard delete of a Number resource
         * @param {string} ref Number\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNumber: async (ref: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ref' is not null or undefined
            assertParamExists('deleteNumber', 'ref', ref)
            const localVarPath = `/v1beta1/numbers/{ref}`
                .replace(`{${"ref"}}`, encodeURIComponent(String(ref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets Number using its reference
         * @param {string} ref Number\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNumber: async (ref: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ref' is not null or undefined
            assertParamExists('getNumber', 'ref', ref)
            const localVarPath = `/v1beta1/numbers/{ref}`
                .replace(`{${"ref"}}`, encodeURIComponent(String(ref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lists Numbers from the SIP Proxy subsystem
         * @param {number} [pageSize] The maximum number of items in the list.
         * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities (reserved).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNumbers: async (pageSize?: number, pageToken?: string, view?: 'BASIC' | 'STANDARD' | 'FULL', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1beta1/numbers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }

            if (view !== undefined) {
                localVarQueryParameter['view'] = view;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Change or update fields in a resource
         * @param {string} ref Number\&#39;s reference
         * @param {InlineObject2} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNumber: async (ref: string, body: InlineObject2, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ref' is not null or undefined
            assertParamExists('updateNumber', 'ref', ref)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateNumber', 'body', body)
            const localVarPath = `/v1beta1/numbers/{ref}`
                .replace(`{${"ref"}}`, encodeURIComponent(String(ref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NumbersApi - functional programming interface
 * @export
 */
export const NumbersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NumbersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates a new Number resource
         * @param {CreateNumberRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNumber(body: CreateNumberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNumber(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Hard delete of a Number resource
         * @param {string} ref Number\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteNumber(ref: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteNumber(ref, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets Number using its reference
         * @param {string} ref Number\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNumber(ref: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNumber(ref, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Lists Numbers from the SIP Proxy subsystem
         * @param {number} [pageSize] The maximum number of items in the list.
         * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities (reserved).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listNumbers(pageSize?: number, pageToken?: string, view?: 'BASIC' | 'STANDARD' | 'FULL', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListNumbersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listNumbers(pageSize, pageToken, view, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Change or update fields in a resource
         * @param {string} ref Number\&#39;s reference
         * @param {InlineObject2} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateNumber(ref: string, body: InlineObject2, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateNumber(ref, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NumbersApi - factory interface
 * @export
 */
export const NumbersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NumbersApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates a new Number resource
         * @param {CreateNumberRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNumber(body: CreateNumberRequest, options?: any): AxiosPromise<Number> {
            return localVarFp.createNumber(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hard delete of a Number resource
         * @param {string} ref Number\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNumber(ref: string, options?: any): AxiosPromise<object> {
            return localVarFp.deleteNumber(ref, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets Number using its reference
         * @param {string} ref Number\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNumber(ref: string, options?: any): AxiosPromise<Number> {
            return localVarFp.getNumber(ref, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lists Numbers from the SIP Proxy subsystem
         * @param {number} [pageSize] The maximum number of items in the list.
         * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities (reserved).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNumbers(pageSize?: number, pageToken?: string, view?: 'BASIC' | 'STANDARD' | 'FULL', options?: any): AxiosPromise<ListNumbersResponse> {
            return localVarFp.listNumbers(pageSize, pageToken, view, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Change or update fields in a resource
         * @param {string} ref Number\&#39;s reference
         * @param {InlineObject2} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNumber(ref: string, body: InlineObject2, options?: any): AxiosPromise<Number> {
            return localVarFp.updateNumber(ref, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NumbersApi - object-oriented interface
 * @export
 * @class NumbersApi
 * @extends {BaseAPI}
 */
export class NumbersApi extends BaseAPI {
    /**
     * 
     * @summary Creates a new Number resource
     * @param {CreateNumberRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NumbersApi
     */
    public createNumber(body: CreateNumberRequest, options?: AxiosRequestConfig) {
        return NumbersApiFp(this.configuration).createNumber(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hard delete of a Number resource
     * @param {string} ref Number\&#39;s reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NumbersApi
     */
    public deleteNumber(ref: string, options?: AxiosRequestConfig) {
        return NumbersApiFp(this.configuration).deleteNumber(ref, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets Number using its reference
     * @param {string} ref Number\&#39;s reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NumbersApi
     */
    public getNumber(ref: string, options?: AxiosRequestConfig) {
        return NumbersApiFp(this.configuration).getNumber(ref, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lists Numbers from the SIP Proxy subsystem
     * @param {number} [pageSize] The maximum number of items in the list.
     * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
     * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities (reserved).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NumbersApi
     */
    public listNumbers(pageSize?: number, pageToken?: string, view?: 'BASIC' | 'STANDARD' | 'FULL', options?: AxiosRequestConfig) {
        return NumbersApiFp(this.configuration).listNumbers(pageSize, pageToken, view, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Change or update fields in a resource
     * @param {string} ref Number\&#39;s reference
     * @param {InlineObject2} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NumbersApi
     */
    public updateNumber(ref: string, body: InlineObject2, options?: AxiosRequestConfig) {
        return NumbersApiFp(this.configuration).updateNumber(ref, body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProjectsApi - axios parameter creator
 * @export
 */
export const ProjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a new Project resource
         * @param {CreateProjectRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject: async (body: CreateProjectRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createProject', 'body', body)
            const localVarPath = `/v1beta1/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary WARNING: Hard delete of a Project will remove all related resources
         * @param {string} ref Project\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProject: async (ref: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ref' is not null or undefined
            assertParamExists('deleteProject', 'ref', ref)
            const localVarPath = `/v1beta1/projects/{ref}`
                .replace(`{${"ref"}}`, encodeURIComponent(String(ref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a Project by AccessKeyId
         * @param {string} ref Project\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject: async (ref: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ref' is not null or undefined
            assertParamExists('getProject', 'ref', ref)
            const localVarPath = `/v1beta1/projects/{ref}`
                .replace(`{${"ref"}}`, encodeURIComponent(String(ref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lists all the Projects for a given User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjects: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1beta1/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Regenerates the accessKeySecret
         * @param {string} ref Project\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renewAccessKeySecret: async (ref: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ref' is not null or undefined
            assertParamExists('renewAccessKeySecret', 'ref', ref)
            const localVarPath = `/v1beta1/projects/{ref}/credentials`
                .replace(`{${"ref"}}`, encodeURIComponent(String(ref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a given Project
         * @param {string} ref Project\&#39;s reference
         * @param {InlineObject3} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProject: async (ref: string, body: InlineObject3, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ref' is not null or undefined
            assertParamExists('updateProject', 'ref', ref)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateProject', 'body', body)
            const localVarPath = `/v1beta1/projects/{ref}`
                .replace(`{${"ref"}}`, encodeURIComponent(String(ref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectsApi - functional programming interface
 * @export
 */
export const ProjectsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates a new Project resource
         * @param {CreateProjectRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProject(body: CreateProjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProject(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary WARNING: Hard delete of a Project will remove all related resources
         * @param {string} ref Project\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProject(ref: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProject(ref, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a Project by AccessKeyId
         * @param {string} ref Project\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProject(ref: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProject(ref, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Lists all the Projects for a given User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProjects(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListProjectsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProjects(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Regenerates the accessKeySecret
         * @param {string} ref Project\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async renewAccessKeySecret(ref: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RenewAccessKeySecretResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.renewAccessKeySecret(ref, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates a given Project
         * @param {string} ref Project\&#39;s reference
         * @param {InlineObject3} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProject(ref: string, body: InlineObject3, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProject(ref, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectsApi - factory interface
 * @export
 */
export const ProjectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectsApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates a new Project resource
         * @param {CreateProjectRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject(body: CreateProjectRequest, options?: any): AxiosPromise<Project> {
            return localVarFp.createProject(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary WARNING: Hard delete of a Project will remove all related resources
         * @param {string} ref Project\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProject(ref: string, options?: any): AxiosPromise<object> {
            return localVarFp.deleteProject(ref, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a Project by AccessKeyId
         * @param {string} ref Project\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject(ref: string, options?: any): AxiosPromise<Project> {
            return localVarFp.getProject(ref, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lists all the Projects for a given User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjects(options?: any): AxiosPromise<ListProjectsResponse> {
            return localVarFp.listProjects(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Regenerates the accessKeySecret
         * @param {string} ref Project\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renewAccessKeySecret(ref: string, options?: any): AxiosPromise<RenewAccessKeySecretResponse> {
            return localVarFp.renewAccessKeySecret(ref, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates a given Project
         * @param {string} ref Project\&#39;s reference
         * @param {InlineObject3} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProject(ref: string, body: InlineObject3, options?: any): AxiosPromise<Project> {
            return localVarFp.updateProject(ref, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
export class ProjectsApi extends BaseAPI {
    /**
     * 
     * @summary Creates a new Project resource
     * @param {CreateProjectRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public createProject(body: CreateProjectRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).createProject(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary WARNING: Hard delete of a Project will remove all related resources
     * @param {string} ref Project\&#39;s reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public deleteProject(ref: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).deleteProject(ref, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a Project by AccessKeyId
     * @param {string} ref Project\&#39;s reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getProject(ref: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).getProject(ref, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lists all the Projects for a given User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public listProjects(options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).listProjects(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Regenerates the accessKeySecret
     * @param {string} ref Project\&#39;s reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public renewAccessKeySecret(ref: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).renewAccessKeySecret(ref, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates a given Project
     * @param {string} ref Project\&#39;s reference
     * @param {InlineObject3} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public updateProject(ref: string, body: InlineObject3, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).updateProject(ref, body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProvidersApi - axios parameter creator
 * @export
 */
export const ProvidersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a new Provider resource.
         * @param {CreateProviderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProvider: async (body: CreateProviderRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createProvider', 'body', body)
            const localVarPath = `/v1beta1/providers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hard delete of a Provider resource
         * @param {string} ref Provider\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProvider: async (ref: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ref' is not null or undefined
            assertParamExists('deleteProvider', 'ref', ref)
            const localVarPath = `/v1beta1/providers/{ref}`
                .replace(`{${"ref"}}`, encodeURIComponent(String(ref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets Provider using its reference
         * @param {string} ref Provider\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProvider: async (ref: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ref' is not null or undefined
            assertParamExists('getProvider', 'ref', ref)
            const localVarPath = `/v1beta1/providers/{ref}`
                .replace(`{${"ref"}}`, encodeURIComponent(String(ref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lists Providers from the SIP Proxy subsystem
         * @param {number} [pageSize] The maximum number of items in the list.
         * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities (reserved).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProviders: async (pageSize?: number, pageToken?: string, view?: 'BASIC' | 'STANDARD' | 'FULL', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1beta1/providers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }

            if (view !== undefined) {
                localVarQueryParameter['view'] = view;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Change or update fields in a resource
         * @param {string} ref Provider\&#39;s reference
         * @param {InlineObject4} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProvider: async (ref: string, body: InlineObject4, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ref' is not null or undefined
            assertParamExists('updateProvider', 'ref', ref)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateProvider', 'body', body)
            const localVarPath = `/v1beta1/providers/{ref}`
                .replace(`{${"ref"}}`, encodeURIComponent(String(ref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProvidersApi - functional programming interface
 * @export
 */
export const ProvidersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProvidersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates a new Provider resource.
         * @param {CreateProviderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProvider(body: CreateProviderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Provider>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProvider(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Hard delete of a Provider resource
         * @param {string} ref Provider\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProvider(ref: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProvider(ref, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets Provider using its reference
         * @param {string} ref Provider\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProvider(ref: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Provider>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProvider(ref, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Lists Providers from the SIP Proxy subsystem
         * @param {number} [pageSize] The maximum number of items in the list.
         * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities (reserved).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProviders(pageSize?: number, pageToken?: string, view?: 'BASIC' | 'STANDARD' | 'FULL', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListProvidersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProviders(pageSize, pageToken, view, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Change or update fields in a resource
         * @param {string} ref Provider\&#39;s reference
         * @param {InlineObject4} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProvider(ref: string, body: InlineObject4, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Provider>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProvider(ref, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProvidersApi - factory interface
 * @export
 */
export const ProvidersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProvidersApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates a new Provider resource.
         * @param {CreateProviderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProvider(body: CreateProviderRequest, options?: any): AxiosPromise<Provider> {
            return localVarFp.createProvider(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hard delete of a Provider resource
         * @param {string} ref Provider\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProvider(ref: string, options?: any): AxiosPromise<object> {
            return localVarFp.deleteProvider(ref, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets Provider using its reference
         * @param {string} ref Provider\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProvider(ref: string, options?: any): AxiosPromise<Provider> {
            return localVarFp.getProvider(ref, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lists Providers from the SIP Proxy subsystem
         * @param {number} [pageSize] The maximum number of items in the list.
         * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities (reserved).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProviders(pageSize?: number, pageToken?: string, view?: 'BASIC' | 'STANDARD' | 'FULL', options?: any): AxiosPromise<ListProvidersResponse> {
            return localVarFp.listProviders(pageSize, pageToken, view, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Change or update fields in a resource
         * @param {string} ref Provider\&#39;s reference
         * @param {InlineObject4} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProvider(ref: string, body: InlineObject4, options?: any): AxiosPromise<Provider> {
            return localVarFp.updateProvider(ref, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProvidersApi - object-oriented interface
 * @export
 * @class ProvidersApi
 * @extends {BaseAPI}
 */
export class ProvidersApi extends BaseAPI {
    /**
     * 
     * @summary Creates a new Provider resource.
     * @param {CreateProviderRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvidersApi
     */
    public createProvider(body: CreateProviderRequest, options?: AxiosRequestConfig) {
        return ProvidersApiFp(this.configuration).createProvider(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hard delete of a Provider resource
     * @param {string} ref Provider\&#39;s reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvidersApi
     */
    public deleteProvider(ref: string, options?: AxiosRequestConfig) {
        return ProvidersApiFp(this.configuration).deleteProvider(ref, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets Provider using its reference
     * @param {string} ref Provider\&#39;s reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvidersApi
     */
    public getProvider(ref: string, options?: AxiosRequestConfig) {
        return ProvidersApiFp(this.configuration).getProvider(ref, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lists Providers from the SIP Proxy subsystem
     * @param {number} [pageSize] The maximum number of items in the list.
     * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
     * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities (reserved).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvidersApi
     */
    public listProviders(pageSize?: number, pageToken?: string, view?: 'BASIC' | 'STANDARD' | 'FULL', options?: AxiosRequestConfig) {
        return ProvidersApiFp(this.configuration).listProviders(pageSize, pageToken, view, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Change or update fields in a resource
     * @param {string} ref Provider\&#39;s reference
     * @param {InlineObject4} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvidersApi
     */
    public updateProvider(ref: string, body: InlineObject4, options?: AxiosRequestConfig) {
        return ProvidersApiFp(this.configuration).updateProvider(ref, body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SecretsApi - axios parameter creator
 * @export
 */
export const SecretsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateSecretRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSecret: async (body: CreateSecretRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createSecret', 'body', body)
            const localVarPath = `/v1beta1/secrets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Peforms a hard delete of the Secret resource
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSecret: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deleteSecret', 'name', name)
            const localVarPath = `/v1beta1/secrets/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets Secret with the Secret-name
         * @param {string} name 
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSecret: async (name: string, view?: 'BASIC' | 'STANDARD' | 'FULL', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getSecret', 'name', name)
            const localVarPath = `/v1beta1/secrets/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)

            if (view !== undefined) {
                localVarQueryParameter['view'] = view;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lists Secret
         * @param {number} [pageSize] The maximum number of items in the list.
         * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities (reserved).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSecretsId: async (pageSize?: number, pageToken?: string, view?: 'BASIC' | 'STANDARD' | 'FULL', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1beta1/secrets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }

            if (view !== undefined) {
                localVarQueryParameter['view'] = view;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SecretsApi - functional programming interface
 * @export
 */
export const SecretsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SecretsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateSecretRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSecret(body: CreateSecretRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSecretResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSecret(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Peforms a hard delete of the Secret resource
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSecret(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSecret(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets Secret with the Secret-name
         * @param {string} name 
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSecret(name: string, view?: 'BASIC' | 'STANDARD' | 'FULL', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSecretResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSecret(name, view, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Lists Secret
         * @param {number} [pageSize] The maximum number of items in the list.
         * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities (reserved).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSecretsId(pageSize?: number, pageToken?: string, view?: 'BASIC' | 'STANDARD' | 'FULL', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListSecretIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSecretsId(pageSize, pageToken, view, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SecretsApi - factory interface
 * @export
 */
export const SecretsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SecretsApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateSecretRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSecret(body: CreateSecretRequest, options?: any): AxiosPromise<CreateSecretResponse> {
            return localVarFp.createSecret(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Peforms a hard delete of the Secret resource
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSecret(name: string, options?: any): AxiosPromise<object> {
            return localVarFp.deleteSecret(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets Secret with the Secret-name
         * @param {string} name 
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSecret(name: string, view?: 'BASIC' | 'STANDARD' | 'FULL', options?: any): AxiosPromise<GetSecretResponse> {
            return localVarFp.getSecret(name, view, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lists Secret
         * @param {number} [pageSize] The maximum number of items in the list.
         * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities (reserved).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSecretsId(pageSize?: number, pageToken?: string, view?: 'BASIC' | 'STANDARD' | 'FULL', options?: any): AxiosPromise<ListSecretIdResponse> {
            return localVarFp.listSecretsId(pageSize, pageToken, view, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SecretsApi - object-oriented interface
 * @export
 * @class SecretsApi
 * @extends {BaseAPI}
 */
export class SecretsApi extends BaseAPI {
    /**
     * 
     * @param {CreateSecretRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecretsApi
     */
    public createSecret(body: CreateSecretRequest, options?: AxiosRequestConfig) {
        return SecretsApiFp(this.configuration).createSecret(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Peforms a hard delete of the Secret resource
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecretsApi
     */
    public deleteSecret(name: string, options?: AxiosRequestConfig) {
        return SecretsApiFp(this.configuration).deleteSecret(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets Secret with the Secret-name
     * @param {string} name 
     * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecretsApi
     */
    public getSecret(name: string, view?: 'BASIC' | 'STANDARD' | 'FULL', options?: AxiosRequestConfig) {
        return SecretsApiFp(this.configuration).getSecret(name, view, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lists Secret
     * @param {number} [pageSize] The maximum number of items in the list.
     * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
     * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities (reserved).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecretsApi
     */
    public listSecretsId(pageSize?: number, pageToken?: string, view?: 'BASIC' | 'STANDARD' | 'FULL', options?: AxiosRequestConfig) {
        return SecretsApiFp(this.configuration).listSecretsId(pageSize, pageToken, view, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StorageApi - axios parameter creator
 * @export
 */
export const StorageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {'APPS' | 'RECORDINGS' | 'PUBLIC' | 'FUNCS'} bucket 
         * @param {string} filename 
         * @param {string} [accessKeyId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getObjectURL: async (bucket: 'APPS' | 'RECORDINGS' | 'PUBLIC' | 'FUNCS', filename: string, accessKeyId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bucket' is not null or undefined
            assertParamExists('getObjectURL', 'bucket', bucket)
            // verify required parameter 'filename' is not null or undefined
            assertParamExists('getObjectURL', 'filename', filename)
            const localVarPath = `/v1beta1/storage/{bucket}/{filename}`
                .replace(`{${"bucket"}}`, encodeURIComponent(String(bucket)))
                .replace(`{${"filename"}}`, encodeURIComponent(String(filename)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)

            if (accessKeyId !== undefined) {
                localVarQueryParameter['accessKeyId'] = accessKeyId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StorageApi - functional programming interface
 * @export
 */
export const StorageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StorageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {'APPS' | 'RECORDINGS' | 'PUBLIC' | 'FUNCS'} bucket 
         * @param {string} filename 
         * @param {string} [accessKeyId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getObjectURL(bucket: 'APPS' | 'RECORDINGS' | 'PUBLIC' | 'FUNCS', filename: string, accessKeyId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetObjectURLResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getObjectURL(bucket, filename, accessKeyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StorageApi - factory interface
 * @export
 */
export const StorageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StorageApiFp(configuration)
    return {
        /**
         * 
         * @param {'APPS' | 'RECORDINGS' | 'PUBLIC' | 'FUNCS'} bucket 
         * @param {string} filename 
         * @param {string} [accessKeyId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getObjectURL(bucket: 'APPS' | 'RECORDINGS' | 'PUBLIC' | 'FUNCS', filename: string, accessKeyId?: string, options?: any): AxiosPromise<GetObjectURLResponse> {
            return localVarFp.getObjectURL(bucket, filename, accessKeyId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StorageApi - object-oriented interface
 * @export
 * @class StorageApi
 * @extends {BaseAPI}
 */
export class StorageApi extends BaseAPI {
    /**
     * 
     * @param {'APPS' | 'RECORDINGS' | 'PUBLIC' | 'FUNCS'} bucket 
     * @param {string} filename 
     * @param {string} [accessKeyId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApi
     */
    public getObjectURL(bucket: 'APPS' | 'RECORDINGS' | 'PUBLIC' | 'FUNCS', filename: string, accessKeyId?: string, options?: AxiosRequestConfig) {
        return StorageApiFp(this.configuration).getObjectURL(bucket, filename, accessKeyId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a new User resource
         * @param {CreateUserRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (body: CreateUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createUser', 'body', body)
            const localVarPath = `/v1beta1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a set of credentials
         * @param {CreateUserCredentialsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserCredentials: async (body: CreateUserCredentialsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createUserCredentials', 'body', body)
            const localVarPath = `/v1beta1/users/credentials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary WARNING: Hard delete of an User will remove all related projects and its resources.
         * @param {string} ref User\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (ref: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ref' is not null or undefined
            assertParamExists('deleteUser', 'ref', ref)
            const localVarPath = `/v1beta1/users/{ref}`
                .replace(`{${"ref"}}`, encodeURIComponent(String(ref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets User by reference
         * @param {string} ref User\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (ref: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ref' is not null or undefined
            assertParamExists('getUser', 'ref', ref)
            const localVarPath = `/v1beta1/users/{ref}`
                .replace(`{${"ref"}}`, encodeURIComponent(String(ref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lists all the Users you have access to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1beta1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Change or update fields in a resource
         * @param {string} ref User\&#39;s reference
         * @param {InlineObject5} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (ref: string, body: InlineObject5, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ref' is not null or undefined
            assertParamExists('updateUser', 'ref', ref)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateUser', 'body', body)
            const localVarPath = `/v1beta1/users/{ref}`
                .replace(`{${"ref"}}`, encodeURIComponent(String(ref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessKeyId required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration)

            // authentication AccessKeySecret required
            await setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates a new User resource
         * @param {CreateUserRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(body: CreateUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a set of credentials
         * @param {CreateUserCredentialsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserCredentials(body: CreateUserCredentialsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUserCredentialsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserCredentials(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary WARNING: Hard delete of an User will remove all related projects and its resources.
         * @param {string} ref User\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(ref: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(ref, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets User by reference
         * @param {string} ref User\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(ref: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(ref, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Lists all the Users you have access to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListUsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Change or update fields in a resource
         * @param {string} ref User\&#39;s reference
         * @param {InlineObject5} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(ref: string, body: InlineObject5, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(ref, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates a new User resource
         * @param {CreateUserRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(body: CreateUserRequest, options?: any): AxiosPromise<User> {
            return localVarFp.createUser(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a set of credentials
         * @param {CreateUserCredentialsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserCredentials(body: CreateUserCredentialsRequest, options?: any): AxiosPromise<CreateUserCredentialsResponse> {
            return localVarFp.createUserCredentials(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary WARNING: Hard delete of an User will remove all related projects and its resources.
         * @param {string} ref User\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(ref: string, options?: any): AxiosPromise<object> {
            return localVarFp.deleteUser(ref, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets User by reference
         * @param {string} ref User\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(ref: string, options?: any): AxiosPromise<User> {
            return localVarFp.getUser(ref, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lists all the Users you have access to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers(options?: any): AxiosPromise<ListUsersResponse> {
            return localVarFp.listUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Change or update fields in a resource
         * @param {string} ref User\&#39;s reference
         * @param {InlineObject5} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(ref: string, body: InlineObject5, options?: any): AxiosPromise<User> {
            return localVarFp.updateUser(ref, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary Creates a new User resource
     * @param {CreateUserRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createUser(body: CreateUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).createUser(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a set of credentials
     * @param {CreateUserCredentialsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createUserCredentials(body: CreateUserCredentialsRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).createUserCredentials(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary WARNING: Hard delete of an User will remove all related projects and its resources.
     * @param {string} ref User\&#39;s reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public deleteUser(ref: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).deleteUser(ref, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets User by reference
     * @param {string} ref User\&#39;s reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUser(ref: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUser(ref, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lists all the Users you have access to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUsers(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Change or update fields in a resource
     * @param {string} ref User\&#39;s reference
     * @param {InlineObject5} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUser(ref: string, body: InlineObject5, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateUser(ref, body, options).then((request) => request(this.axios, this.basePath));
    }
}


