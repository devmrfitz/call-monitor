/* tslint:disable */
/* eslint-disable */
/**
 * Project Fonos
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: psanders@fonoster.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from './base';
/**
 *
 * @export
 * @enum {string}
 */
export var GetObjectURLRequestBucket;
(function (GetObjectURLRequestBucket) {
    GetObjectURLRequestBucket["Apps"] = "APPS";
    GetObjectURLRequestBucket["Recordings"] = "RECORDINGS";
    GetObjectURLRequestBucket["Public"] = "PUBLIC";
    GetObjectURLRequestBucket["Funcs"] = "FUNCS";
})(GetObjectURLRequestBucket || (GetObjectURLRequestBucket = {}));
/**
 *
 * @export
 * @enum {string}
 */
export var UploadObjectRequestBucket;
(function (UploadObjectRequestBucket) {
    UploadObjectRequestBucket["Apps"] = "APPS";
    UploadObjectRequestBucket["Recordings"] = "RECORDINGS";
    UploadObjectRequestBucket["Public"] = "PUBLIC";
    UploadObjectRequestBucket["Funcs"] = "FUNCS";
})(UploadObjectRequestBucket || (UploadObjectRequestBucket = {}));
/**
 *
 * @export
 * @enum {string}
 */
export var View;
(function (View) {
    View["Basic"] = "BASIC";
    View["Standard"] = "STANDARD";
    View["Full"] = "FULL";
})(View || (View = {}));
/**
 * AgentsApi - axios parameter creator
 * @export
 */
export const AgentsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Creates a new Agent resource
         * @param {CreateAgentRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAgent: (body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createAgent', 'body', body);
            const localVarPath = `/v1beta1/agents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Hard delete of an Agent resource
         * @param {string} ref Agent\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAgent: (ref, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'ref' is not null or undefined
            assertParamExists('deleteAgent', 'ref', ref);
            const localVarPath = `/v1beta1/agents/{ref}`
                .replace(`{${"ref"}}`, encodeURIComponent(String(ref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Gets Agent by reference
         * @param {string} ref Agent\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgent: (ref, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'ref' is not null or undefined
            assertParamExists('getAgent', 'ref', ref);
            const localVarPath = `/v1beta1/agents/{ref}`
                .replace(`{${"ref"}}`, encodeURIComponent(String(ref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Lists Agents from the SIP Proxy subsystem
         * @param {number} [pageSize] The maximum number of items in the list.
         * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities (reserved).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAgents: (pageSize, pageToken, view, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1beta1/agents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }
            if (view !== undefined) {
                localVarQueryParameter['view'] = view;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Change or update fields in a resource
         * @param {string} ref Agent\&#39;s reference
         * @param {InlineObject} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgent: (ref, body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'ref' is not null or undefined
            assertParamExists('updateAgent', 'ref', ref);
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateAgent', 'body', body);
            const localVarPath = `/v1beta1/agents/{ref}`
                .replace(`{${"ref"}}`, encodeURIComponent(String(ref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * AgentsApi - functional programming interface
 * @export
 */
export const AgentsApiFp = function (configuration) {
    const localVarAxiosParamCreator = AgentsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Creates a new Agent resource
         * @param {CreateAgentRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAgent(body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAgent(body, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Hard delete of an Agent resource
         * @param {string} ref Agent\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAgent(ref, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteAgent(ref, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Gets Agent by reference
         * @param {string} ref Agent\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgent(ref, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAgent(ref, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Lists Agents from the SIP Proxy subsystem
         * @param {number} [pageSize] The maximum number of items in the list.
         * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities (reserved).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAgents(pageSize, pageToken, view, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAgents(pageSize, pageToken, view, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Change or update fields in a resource
         * @param {string} ref Agent\&#39;s reference
         * @param {InlineObject} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgent(ref, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateAgent(ref, body, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * AgentsApi - factory interface
 * @export
 */
export const AgentsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = AgentsApiFp(configuration);
    return {
        /**
         *
         * @summary Creates a new Agent resource
         * @param {CreateAgentRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAgent(body, options) {
            return localVarFp.createAgent(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Hard delete of an Agent resource
         * @param {string} ref Agent\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAgent(ref, options) {
            return localVarFp.deleteAgent(ref, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets Agent by reference
         * @param {string} ref Agent\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgent(ref, options) {
            return localVarFp.getAgent(ref, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Lists Agents from the SIP Proxy subsystem
         * @param {number} [pageSize] The maximum number of items in the list.
         * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities (reserved).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAgents(pageSize, pageToken, view, options) {
            return localVarFp.listAgents(pageSize, pageToken, view, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Change or update fields in a resource
         * @param {string} ref Agent\&#39;s reference
         * @param {InlineObject} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgent(ref, body, options) {
            return localVarFp.updateAgent(ref, body, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * AgentsApi - object-oriented interface
 * @export
 * @class AgentsApi
 * @extends {BaseAPI}
 */
export class AgentsApi extends BaseAPI {
    /**
     *
     * @summary Creates a new Agent resource
     * @param {CreateAgentRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    createAgent(body, options) {
        return AgentsApiFp(this.configuration).createAgent(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Hard delete of an Agent resource
     * @param {string} ref Agent\&#39;s reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    deleteAgent(ref, options) {
        return AgentsApiFp(this.configuration).deleteAgent(ref, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets Agent by reference
     * @param {string} ref Agent\&#39;s reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    getAgent(ref, options) {
        return AgentsApiFp(this.configuration).getAgent(ref, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Lists Agents from the SIP Proxy subsystem
     * @param {number} [pageSize] The maximum number of items in the list.
     * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
     * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities (reserved).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    listAgents(pageSize, pageToken, view, options) {
        return AgentsApiFp(this.configuration).listAgents(pageSize, pageToken, view, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Change or update fields in a resource
     * @param {string} ref Agent\&#39;s reference
     * @param {InlineObject} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    updateAgent(ref, body, options) {
        return AgentsApiFp(this.configuration).updateAgent(ref, body, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Creates a new token for a given accessKeyId
         * @param {CreateTokenRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createToken: (body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createToken', 'body', body);
            const localVarPath = `/v1beta1/auth/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Gets a role by name
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRole: (name, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getRole', 'name', name);
            const localVarPath = `/v1beta1/auth/role/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Verifies if a token was issue by Fonos
         * @param {string} token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateToken: (token, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('validateToken', 'token', token);
            const localVarPath = `/v1beta1/auth/token/{token}`
                .replace(`{${"token"}}`, encodeURIComponent(String(token)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function (configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Creates a new token for a given accessKeyId
         * @param {CreateTokenRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createToken(body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createToken(body, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Gets a role by name
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRole(name, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRole(name, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Verifies if a token was issue by Fonos
         * @param {string} token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateToken(token, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.validateToken(token, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration, basePath, axios) {
    const localVarFp = AuthApiFp(configuration);
    return {
        /**
         *
         * @summary Creates a new token for a given accessKeyId
         * @param {CreateTokenRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createToken(body, options) {
            return localVarFp.createToken(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets a role by name
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRole(name, options) {
            return localVarFp.getRole(name, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Verifies if a token was issue by Fonos
         * @param {string} token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateToken(token, options) {
            return localVarFp.validateToken(token, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     *
     * @summary Creates a new token for a given accessKeyId
     * @param {CreateTokenRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    createToken(body, options) {
        return AuthApiFp(this.configuration).createToken(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets a role by name
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    getRole(name, options) {
        return AuthApiFp(this.configuration).getRole(name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Verifies if a token was issue by Fonos
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    validateToken(token, options) {
        return AuthApiFp(this.configuration).validateToken(token, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * CallManagerApi - axios parameter creator
 * @export
 */
export const CallManagerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Originates a call and pass channel to an application
         * @param {CallRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        call: (body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('call', 'body', body);
            const localVarPath = `/v1beta1/call`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * CallManagerApi - functional programming interface
 * @export
 */
export const CallManagerApiFp = function (configuration) {
    const localVarAxiosParamCreator = CallManagerApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Originates a call and pass channel to an application
         * @param {CallRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        call(body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.call(body, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * CallManagerApi - factory interface
 * @export
 */
export const CallManagerApiFactory = function (configuration, basePath, axios) {
    const localVarFp = CallManagerApiFp(configuration);
    return {
        /**
         *
         * @summary Originates a call and pass channel to an application
         * @param {CallRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        call(body, options) {
            return localVarFp.call(body, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * CallManagerApi - object-oriented interface
 * @export
 * @class CallManagerApi
 * @extends {BaseAPI}
 */
export class CallManagerApi extends BaseAPI {
    /**
     *
     * @summary Originates a call and pass channel to an application
     * @param {CallRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallManagerApi
     */
    call(body, options) {
        return CallManagerApiFp(this.configuration).call(body, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * DomainsApi - axios parameter creator
 * @export
 */
export const DomainsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Creates a new Domain resource
         * @param {CreateDomainRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDomain: (body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createDomain', 'body', body);
            const localVarPath = `/v1beta1/domains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Hard delete of a domain resource
         * @param {string} ref Domain\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDomain: (ref, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'ref' is not null or undefined
            assertParamExists('deleteDomain', 'ref', ref);
            const localVarPath = `/v1beta1/domains/{ref}`
                .replace(`{${"ref"}}`, encodeURIComponent(String(ref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Gets a Domain by reference
         * @param {string} ref Domain\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomain: (ref, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'ref' is not null or undefined
            assertParamExists('getDomain', 'ref', ref);
            const localVarPath = `/v1beta1/domains/{ref}`
                .replace(`{${"ref"}}`, encodeURIComponent(String(ref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Change or update fields in a resource
         * @param {string} ref Domain\&#39;s reference
         * @param {InlineObject1} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDomain: (ref, body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'ref' is not null or undefined
            assertParamExists('updateDomain', 'ref', ref);
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateDomain', 'body', body);
            const localVarPath = `/v1beta1/domains/{ref}`
                .replace(`{${"ref"}}`, encodeURIComponent(String(ref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * DomainsApi - functional programming interface
 * @export
 */
export const DomainsApiFp = function (configuration) {
    const localVarAxiosParamCreator = DomainsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Creates a new Domain resource
         * @param {CreateDomainRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDomain(body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createDomain(body, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Hard delete of a domain resource
         * @param {string} ref Domain\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDomain(ref, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteDomain(ref, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Gets a Domain by reference
         * @param {string} ref Domain\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomain(ref, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getDomain(ref, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Change or update fields in a resource
         * @param {string} ref Domain\&#39;s reference
         * @param {InlineObject1} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDomain(ref, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateDomain(ref, body, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * DomainsApi - factory interface
 * @export
 */
export const DomainsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = DomainsApiFp(configuration);
    return {
        /**
         *
         * @summary Creates a new Domain resource
         * @param {CreateDomainRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDomain(body, options) {
            return localVarFp.createDomain(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Hard delete of a domain resource
         * @param {string} ref Domain\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDomain(ref, options) {
            return localVarFp.deleteDomain(ref, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets a Domain by reference
         * @param {string} ref Domain\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomain(ref, options) {
            return localVarFp.getDomain(ref, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Change or update fields in a resource
         * @param {string} ref Domain\&#39;s reference
         * @param {InlineObject1} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDomain(ref, body, options) {
            return localVarFp.updateDomain(ref, body, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * DomainsApi - object-oriented interface
 * @export
 * @class DomainsApi
 * @extends {BaseAPI}
 */
export class DomainsApi extends BaseAPI {
    /**
     *
     * @summary Creates a new Domain resource
     * @param {CreateDomainRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    createDomain(body, options) {
        return DomainsApiFp(this.configuration).createDomain(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Hard delete of a domain resource
     * @param {string} ref Domain\&#39;s reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    deleteDomain(ref, options) {
        return DomainsApiFp(this.configuration).deleteDomain(ref, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets a Domain by reference
     * @param {string} ref Domain\&#39;s reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    getDomain(ref, options) {
        return DomainsApiFp(this.configuration).getDomain(ref, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Change or update fields in a resource
     * @param {string} ref Domain\&#39;s reference
     * @param {InlineObject1} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    updateDomain(ref, body, options) {
        return DomainsApiFp(this.configuration).updateDomain(ref, body, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * FuncsApi - axios parameter creator
 * @export
 */
export const FuncsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Peforms a hard delete of the function
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFunc: (name, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deleteFunc', 'name', name);
            const localVarPath = `/v1beta1/funcs/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Gets a function by name
         * @param {string} name
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Requested level of detail.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFunc: (name, view, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getFunc', 'name', name);
            const localVarPath = `/v1beta1/funcs/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            if (view !== undefined) {
                localVarQueryParameter['view'] = view;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Peforms a hard delete of the function
         * @param {string} name
         * @param {string} [since] Only return logs after a specific date (RFC3339).
         * @param {number} [tail]
         * @param {boolean} [follow]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFuncLogs: (name, since, tail, follow, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getFuncLogs', 'name', name);
            const localVarPath = `/v1beta1/funcs/{name}/logs`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }
            if (tail !== undefined) {
                localVarQueryParameter['tail'] = tail;
            }
            if (follow !== undefined) {
                localVarQueryParameter['follow'] = follow;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Shows a list of user functions
         * @param {number} [pageSize] The maximum number of items in the list.
         * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFuncs: (pageSize, pageToken, view, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1beta1/funcs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }
            if (view !== undefined) {
                localVarQueryParameter['view'] = view;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * FuncsApi - functional programming interface
 * @export
 */
export const FuncsApiFp = function (configuration) {
    const localVarAxiosParamCreator = FuncsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Peforms a hard delete of the function
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFunc(name, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteFunc(name, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Gets a function by name
         * @param {string} name
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Requested level of detail.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFunc(name, view, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFunc(name, view, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Peforms a hard delete of the function
         * @param {string} name
         * @param {string} [since] Only return logs after a specific date (RFC3339).
         * @param {number} [tail]
         * @param {boolean} [follow]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFuncLogs(name, since, tail, follow, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFuncLogs(name, since, tail, follow, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Shows a list of user functions
         * @param {number} [pageSize] The maximum number of items in the list.
         * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFuncs(pageSize, pageToken, view, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listFuncs(pageSize, pageToken, view, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * FuncsApi - factory interface
 * @export
 */
export const FuncsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = FuncsApiFp(configuration);
    return {
        /**
         *
         * @summary Peforms a hard delete of the function
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFunc(name, options) {
            return localVarFp.deleteFunc(name, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets a function by name
         * @param {string} name
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Requested level of detail.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFunc(name, view, options) {
            return localVarFp.getFunc(name, view, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Peforms a hard delete of the function
         * @param {string} name
         * @param {string} [since] Only return logs after a specific date (RFC3339).
         * @param {number} [tail]
         * @param {boolean} [follow]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFuncLogs(name, since, tail, follow, options) {
            return localVarFp.getFuncLogs(name, since, tail, follow, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Shows a list of user functions
         * @param {number} [pageSize] The maximum number of items in the list.
         * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFuncs(pageSize, pageToken, view, options) {
            return localVarFp.listFuncs(pageSize, pageToken, view, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * FuncsApi - object-oriented interface
 * @export
 * @class FuncsApi
 * @extends {BaseAPI}
 */
export class FuncsApi extends BaseAPI {
    /**
     *
     * @summary Peforms a hard delete of the function
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuncsApi
     */
    deleteFunc(name, options) {
        return FuncsApiFp(this.configuration).deleteFunc(name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets a function by name
     * @param {string} name
     * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Requested level of detail.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuncsApi
     */
    getFunc(name, view, options) {
        return FuncsApiFp(this.configuration).getFunc(name, view, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Peforms a hard delete of the function
     * @param {string} name
     * @param {string} [since] Only return logs after a specific date (RFC3339).
     * @param {number} [tail]
     * @param {boolean} [follow]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuncsApi
     */
    getFuncLogs(name, since, tail, follow, options) {
        return FuncsApiFp(this.configuration).getFuncLogs(name, since, tail, follow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Shows a list of user functions
     * @param {number} [pageSize] The maximum number of items in the list.
     * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
     * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuncsApi
     */
    listFuncs(pageSize, pageToken, view, options) {
        return FuncsApiFp(this.configuration).listFuncs(pageSize, pageToken, view, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * NumbersApi - axios parameter creator
 * @export
 */
export const NumbersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Creates a new Number resource
         * @param {CreateNumberRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNumber: (body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createNumber', 'body', body);
            const localVarPath = `/v1beta1/numbers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Hard delete of a Number resource
         * @param {string} ref Number\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNumber: (ref, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'ref' is not null or undefined
            assertParamExists('deleteNumber', 'ref', ref);
            const localVarPath = `/v1beta1/numbers/{ref}`
                .replace(`{${"ref"}}`, encodeURIComponent(String(ref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Gets Number using its reference
         * @param {string} ref Number\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNumber: (ref, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'ref' is not null or undefined
            assertParamExists('getNumber', 'ref', ref);
            const localVarPath = `/v1beta1/numbers/{ref}`
                .replace(`{${"ref"}}`, encodeURIComponent(String(ref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Lists Numbers from the SIP Proxy subsystem
         * @param {number} [pageSize] The maximum number of items in the list.
         * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities (reserved).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNumbers: (pageSize, pageToken, view, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1beta1/numbers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }
            if (view !== undefined) {
                localVarQueryParameter['view'] = view;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Change or update fields in a resource
         * @param {string} ref Number\&#39;s reference
         * @param {InlineObject2} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNumber: (ref, body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'ref' is not null or undefined
            assertParamExists('updateNumber', 'ref', ref);
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateNumber', 'body', body);
            const localVarPath = `/v1beta1/numbers/{ref}`
                .replace(`{${"ref"}}`, encodeURIComponent(String(ref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * NumbersApi - functional programming interface
 * @export
 */
export const NumbersApiFp = function (configuration) {
    const localVarAxiosParamCreator = NumbersApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Creates a new Number resource
         * @param {CreateNumberRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNumber(body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createNumber(body, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Hard delete of a Number resource
         * @param {string} ref Number\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNumber(ref, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteNumber(ref, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Gets Number using its reference
         * @param {string} ref Number\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNumber(ref, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getNumber(ref, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Lists Numbers from the SIP Proxy subsystem
         * @param {number} [pageSize] The maximum number of items in the list.
         * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities (reserved).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNumbers(pageSize, pageToken, view, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listNumbers(pageSize, pageToken, view, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Change or update fields in a resource
         * @param {string} ref Number\&#39;s reference
         * @param {InlineObject2} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNumber(ref, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateNumber(ref, body, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * NumbersApi - factory interface
 * @export
 */
export const NumbersApiFactory = function (configuration, basePath, axios) {
    const localVarFp = NumbersApiFp(configuration);
    return {
        /**
         *
         * @summary Creates a new Number resource
         * @param {CreateNumberRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNumber(body, options) {
            return localVarFp.createNumber(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Hard delete of a Number resource
         * @param {string} ref Number\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNumber(ref, options) {
            return localVarFp.deleteNumber(ref, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets Number using its reference
         * @param {string} ref Number\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNumber(ref, options) {
            return localVarFp.getNumber(ref, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Lists Numbers from the SIP Proxy subsystem
         * @param {number} [pageSize] The maximum number of items in the list.
         * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities (reserved).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNumbers(pageSize, pageToken, view, options) {
            return localVarFp.listNumbers(pageSize, pageToken, view, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Change or update fields in a resource
         * @param {string} ref Number\&#39;s reference
         * @param {InlineObject2} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNumber(ref, body, options) {
            return localVarFp.updateNumber(ref, body, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * NumbersApi - object-oriented interface
 * @export
 * @class NumbersApi
 * @extends {BaseAPI}
 */
export class NumbersApi extends BaseAPI {
    /**
     *
     * @summary Creates a new Number resource
     * @param {CreateNumberRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NumbersApi
     */
    createNumber(body, options) {
        return NumbersApiFp(this.configuration).createNumber(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Hard delete of a Number resource
     * @param {string} ref Number\&#39;s reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NumbersApi
     */
    deleteNumber(ref, options) {
        return NumbersApiFp(this.configuration).deleteNumber(ref, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets Number using its reference
     * @param {string} ref Number\&#39;s reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NumbersApi
     */
    getNumber(ref, options) {
        return NumbersApiFp(this.configuration).getNumber(ref, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Lists Numbers from the SIP Proxy subsystem
     * @param {number} [pageSize] The maximum number of items in the list.
     * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
     * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities (reserved).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NumbersApi
     */
    listNumbers(pageSize, pageToken, view, options) {
        return NumbersApiFp(this.configuration).listNumbers(pageSize, pageToken, view, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Change or update fields in a resource
     * @param {string} ref Number\&#39;s reference
     * @param {InlineObject2} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NumbersApi
     */
    updateNumber(ref, body, options) {
        return NumbersApiFp(this.configuration).updateNumber(ref, body, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * ProjectsApi - axios parameter creator
 * @export
 */
export const ProjectsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Creates a new Project resource
         * @param {CreateProjectRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject: (body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createProject', 'body', body);
            const localVarPath = `/v1beta1/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary WARNING: Hard delete of a Project will remove all related resources
         * @param {string} ref Project\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProject: (ref, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'ref' is not null or undefined
            assertParamExists('deleteProject', 'ref', ref);
            const localVarPath = `/v1beta1/projects/{ref}`
                .replace(`{${"ref"}}`, encodeURIComponent(String(ref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Gets a Project by AccessKeyId
         * @param {string} ref Project\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject: (ref, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'ref' is not null or undefined
            assertParamExists('getProject', 'ref', ref);
            const localVarPath = `/v1beta1/projects/{ref}`
                .replace(`{${"ref"}}`, encodeURIComponent(String(ref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Lists all the Projects for a given User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjects: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1beta1/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Regenerates the accessKeySecret
         * @param {string} ref Project\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renewAccessKeySecret: (ref, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'ref' is not null or undefined
            assertParamExists('renewAccessKeySecret', 'ref', ref);
            const localVarPath = `/v1beta1/projects/{ref}/credentials`
                .replace(`{${"ref"}}`, encodeURIComponent(String(ref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Updates a given Project
         * @param {string} ref Project\&#39;s reference
         * @param {InlineObject3} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProject: (ref, body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'ref' is not null or undefined
            assertParamExists('updateProject', 'ref', ref);
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateProject', 'body', body);
            const localVarPath = `/v1beta1/projects/{ref}`
                .replace(`{${"ref"}}`, encodeURIComponent(String(ref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * ProjectsApi - functional programming interface
 * @export
 */
export const ProjectsApiFp = function (configuration) {
    const localVarAxiosParamCreator = ProjectsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Creates a new Project resource
         * @param {CreateProjectRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject(body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createProject(body, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary WARNING: Hard delete of a Project will remove all related resources
         * @param {string} ref Project\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProject(ref, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteProject(ref, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Gets a Project by AccessKeyId
         * @param {string} ref Project\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject(ref, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getProject(ref, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Lists all the Projects for a given User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjects(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listProjects(options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Regenerates the accessKeySecret
         * @param {string} ref Project\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renewAccessKeySecret(ref, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.renewAccessKeySecret(ref, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Updates a given Project
         * @param {string} ref Project\&#39;s reference
         * @param {InlineObject3} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProject(ref, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateProject(ref, body, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * ProjectsApi - factory interface
 * @export
 */
export const ProjectsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = ProjectsApiFp(configuration);
    return {
        /**
         *
         * @summary Creates a new Project resource
         * @param {CreateProjectRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject(body, options) {
            return localVarFp.createProject(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary WARNING: Hard delete of a Project will remove all related resources
         * @param {string} ref Project\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProject(ref, options) {
            return localVarFp.deleteProject(ref, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets a Project by AccessKeyId
         * @param {string} ref Project\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject(ref, options) {
            return localVarFp.getProject(ref, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Lists all the Projects for a given User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjects(options) {
            return localVarFp.listProjects(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Regenerates the accessKeySecret
         * @param {string} ref Project\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renewAccessKeySecret(ref, options) {
            return localVarFp.renewAccessKeySecret(ref, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Updates a given Project
         * @param {string} ref Project\&#39;s reference
         * @param {InlineObject3} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProject(ref, body, options) {
            return localVarFp.updateProject(ref, body, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
export class ProjectsApi extends BaseAPI {
    /**
     *
     * @summary Creates a new Project resource
     * @param {CreateProjectRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    createProject(body, options) {
        return ProjectsApiFp(this.configuration).createProject(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary WARNING: Hard delete of a Project will remove all related resources
     * @param {string} ref Project\&#39;s reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    deleteProject(ref, options) {
        return ProjectsApiFp(this.configuration).deleteProject(ref, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets a Project by AccessKeyId
     * @param {string} ref Project\&#39;s reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    getProject(ref, options) {
        return ProjectsApiFp(this.configuration).getProject(ref, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Lists all the Projects for a given User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    listProjects(options) {
        return ProjectsApiFp(this.configuration).listProjects(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Regenerates the accessKeySecret
     * @param {string} ref Project\&#39;s reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    renewAccessKeySecret(ref, options) {
        return ProjectsApiFp(this.configuration).renewAccessKeySecret(ref, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Updates a given Project
     * @param {string} ref Project\&#39;s reference
     * @param {InlineObject3} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    updateProject(ref, body, options) {
        return ProjectsApiFp(this.configuration).updateProject(ref, body, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * ProvidersApi - axios parameter creator
 * @export
 */
export const ProvidersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Creates a new Provider resource.
         * @param {CreateProviderRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProvider: (body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createProvider', 'body', body);
            const localVarPath = `/v1beta1/providers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Hard delete of a Provider resource
         * @param {string} ref Provider\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProvider: (ref, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'ref' is not null or undefined
            assertParamExists('deleteProvider', 'ref', ref);
            const localVarPath = `/v1beta1/providers/{ref}`
                .replace(`{${"ref"}}`, encodeURIComponent(String(ref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Gets Provider using its reference
         * @param {string} ref Provider\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProvider: (ref, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'ref' is not null or undefined
            assertParamExists('getProvider', 'ref', ref);
            const localVarPath = `/v1beta1/providers/{ref}`
                .replace(`{${"ref"}}`, encodeURIComponent(String(ref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Lists Providers from the SIP Proxy subsystem
         * @param {number} [pageSize] The maximum number of items in the list.
         * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities (reserved).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProviders: (pageSize, pageToken, view, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1beta1/providers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }
            if (view !== undefined) {
                localVarQueryParameter['view'] = view;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Change or update fields in a resource
         * @param {string} ref Provider\&#39;s reference
         * @param {InlineObject4} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProvider: (ref, body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'ref' is not null or undefined
            assertParamExists('updateProvider', 'ref', ref);
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateProvider', 'body', body);
            const localVarPath = `/v1beta1/providers/{ref}`
                .replace(`{${"ref"}}`, encodeURIComponent(String(ref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * ProvidersApi - functional programming interface
 * @export
 */
export const ProvidersApiFp = function (configuration) {
    const localVarAxiosParamCreator = ProvidersApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Creates a new Provider resource.
         * @param {CreateProviderRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProvider(body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createProvider(body, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Hard delete of a Provider resource
         * @param {string} ref Provider\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProvider(ref, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteProvider(ref, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Gets Provider using its reference
         * @param {string} ref Provider\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProvider(ref, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getProvider(ref, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Lists Providers from the SIP Proxy subsystem
         * @param {number} [pageSize] The maximum number of items in the list.
         * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities (reserved).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProviders(pageSize, pageToken, view, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listProviders(pageSize, pageToken, view, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Change or update fields in a resource
         * @param {string} ref Provider\&#39;s reference
         * @param {InlineObject4} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProvider(ref, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateProvider(ref, body, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * ProvidersApi - factory interface
 * @export
 */
export const ProvidersApiFactory = function (configuration, basePath, axios) {
    const localVarFp = ProvidersApiFp(configuration);
    return {
        /**
         *
         * @summary Creates a new Provider resource.
         * @param {CreateProviderRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProvider(body, options) {
            return localVarFp.createProvider(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Hard delete of a Provider resource
         * @param {string} ref Provider\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProvider(ref, options) {
            return localVarFp.deleteProvider(ref, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets Provider using its reference
         * @param {string} ref Provider\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProvider(ref, options) {
            return localVarFp.getProvider(ref, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Lists Providers from the SIP Proxy subsystem
         * @param {number} [pageSize] The maximum number of items in the list.
         * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities (reserved).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProviders(pageSize, pageToken, view, options) {
            return localVarFp.listProviders(pageSize, pageToken, view, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Change or update fields in a resource
         * @param {string} ref Provider\&#39;s reference
         * @param {InlineObject4} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProvider(ref, body, options) {
            return localVarFp.updateProvider(ref, body, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ProvidersApi - object-oriented interface
 * @export
 * @class ProvidersApi
 * @extends {BaseAPI}
 */
export class ProvidersApi extends BaseAPI {
    /**
     *
     * @summary Creates a new Provider resource.
     * @param {CreateProviderRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvidersApi
     */
    createProvider(body, options) {
        return ProvidersApiFp(this.configuration).createProvider(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Hard delete of a Provider resource
     * @param {string} ref Provider\&#39;s reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvidersApi
     */
    deleteProvider(ref, options) {
        return ProvidersApiFp(this.configuration).deleteProvider(ref, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets Provider using its reference
     * @param {string} ref Provider\&#39;s reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvidersApi
     */
    getProvider(ref, options) {
        return ProvidersApiFp(this.configuration).getProvider(ref, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Lists Providers from the SIP Proxy subsystem
     * @param {number} [pageSize] The maximum number of items in the list.
     * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
     * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities (reserved).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvidersApi
     */
    listProviders(pageSize, pageToken, view, options) {
        return ProvidersApiFp(this.configuration).listProviders(pageSize, pageToken, view, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Change or update fields in a resource
     * @param {string} ref Provider\&#39;s reference
     * @param {InlineObject4} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvidersApi
     */
    updateProvider(ref, body, options) {
        return ProvidersApiFp(this.configuration).updateProvider(ref, body, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * SecretsApi - axios parameter creator
 * @export
 */
export const SecretsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {CreateSecretRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSecret: (body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createSecret', 'body', body);
            const localVarPath = `/v1beta1/secrets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Peforms a hard delete of the Secret resource
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSecret: (name, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deleteSecret', 'name', name);
            const localVarPath = `/v1beta1/secrets/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Gets Secret with the Secret-name
         * @param {string} name
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSecret: (name, view, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getSecret', 'name', name);
            const localVarPath = `/v1beta1/secrets/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            if (view !== undefined) {
                localVarQueryParameter['view'] = view;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Lists Secret
         * @param {number} [pageSize] The maximum number of items in the list.
         * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities (reserved).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSecretsId: (pageSize, pageToken, view, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1beta1/secrets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }
            if (view !== undefined) {
                localVarQueryParameter['view'] = view;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * SecretsApi - functional programming interface
 * @export
 */
export const SecretsApiFp = function (configuration) {
    const localVarAxiosParamCreator = SecretsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {CreateSecretRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSecret(body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createSecret(body, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Peforms a hard delete of the Secret resource
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSecret(name, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteSecret(name, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Gets Secret with the Secret-name
         * @param {string} name
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSecret(name, view, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSecret(name, view, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Lists Secret
         * @param {number} [pageSize] The maximum number of items in the list.
         * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities (reserved).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSecretsId(pageSize, pageToken, view, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listSecretsId(pageSize, pageToken, view, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * SecretsApi - factory interface
 * @export
 */
export const SecretsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = SecretsApiFp(configuration);
    return {
        /**
         *
         * @param {CreateSecretRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSecret(body, options) {
            return localVarFp.createSecret(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Peforms a hard delete of the Secret resource
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSecret(name, options) {
            return localVarFp.deleteSecret(name, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets Secret with the Secret-name
         * @param {string} name
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSecret(name, view, options) {
            return localVarFp.getSecret(name, view, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Lists Secret
         * @param {number} [pageSize] The maximum number of items in the list.
         * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
         * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities (reserved).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSecretsId(pageSize, pageToken, view, options) {
            return localVarFp.listSecretsId(pageSize, pageToken, view, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * SecretsApi - object-oriented interface
 * @export
 * @class SecretsApi
 * @extends {BaseAPI}
 */
export class SecretsApi extends BaseAPI {
    /**
     *
     * @param {CreateSecretRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecretsApi
     */
    createSecret(body, options) {
        return SecretsApiFp(this.configuration).createSecret(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Peforms a hard delete of the Secret resource
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecretsApi
     */
    deleteSecret(name, options) {
        return SecretsApiFp(this.configuration).deleteSecret(name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets Secret with the Secret-name
     * @param {string} name
     * @param {'BASIC' | 'STANDARD' | 'FULL'} [view]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecretsApi
     */
    getSecret(name, view, options) {
        return SecretsApiFp(this.configuration).getSecret(name, view, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Lists Secret
     * @param {number} [pageSize] The maximum number of items in the list.
     * @param {string} [pageToken] The next_page_token value returned from the previous request, if any.
     * @param {'BASIC' | 'STANDARD' | 'FULL'} [view] Level of detail of the individual entities (reserved).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecretsApi
     */
    listSecretsId(pageSize, pageToken, view, options) {
        return SecretsApiFp(this.configuration).listSecretsId(pageSize, pageToken, view, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * StorageApi - axios parameter creator
 * @export
 */
export const StorageApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {'APPS' | 'RECORDINGS' | 'PUBLIC' | 'FUNCS'} bucket
         * @param {string} filename
         * @param {string} [accessKeyId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getObjectURL: (bucket, filename, accessKeyId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'bucket' is not null or undefined
            assertParamExists('getObjectURL', 'bucket', bucket);
            // verify required parameter 'filename' is not null or undefined
            assertParamExists('getObjectURL', 'filename', filename);
            const localVarPath = `/v1beta1/storage/{bucket}/{filename}`
                .replace(`{${"bucket"}}`, encodeURIComponent(String(bucket)))
                .replace(`{${"filename"}}`, encodeURIComponent(String(filename)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            if (accessKeyId !== undefined) {
                localVarQueryParameter['accessKeyId'] = accessKeyId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * StorageApi - functional programming interface
 * @export
 */
export const StorageApiFp = function (configuration) {
    const localVarAxiosParamCreator = StorageApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {'APPS' | 'RECORDINGS' | 'PUBLIC' | 'FUNCS'} bucket
         * @param {string} filename
         * @param {string} [accessKeyId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getObjectURL(bucket, filename, accessKeyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getObjectURL(bucket, filename, accessKeyId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * StorageApi - factory interface
 * @export
 */
export const StorageApiFactory = function (configuration, basePath, axios) {
    const localVarFp = StorageApiFp(configuration);
    return {
        /**
         *
         * @param {'APPS' | 'RECORDINGS' | 'PUBLIC' | 'FUNCS'} bucket
         * @param {string} filename
         * @param {string} [accessKeyId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getObjectURL(bucket, filename, accessKeyId, options) {
            return localVarFp.getObjectURL(bucket, filename, accessKeyId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * StorageApi - object-oriented interface
 * @export
 * @class StorageApi
 * @extends {BaseAPI}
 */
export class StorageApi extends BaseAPI {
    /**
     *
     * @param {'APPS' | 'RECORDINGS' | 'PUBLIC' | 'FUNCS'} bucket
     * @param {string} filename
     * @param {string} [accessKeyId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApi
     */
    getObjectURL(bucket, filename, accessKeyId, options) {
        return StorageApiFp(this.configuration).getObjectURL(bucket, filename, accessKeyId, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Creates a new User resource
         * @param {CreateUserRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: (body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createUser', 'body', body);
            const localVarPath = `/v1beta1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Creates a set of credentials
         * @param {CreateUserCredentialsRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserCredentials: (body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createUserCredentials', 'body', body);
            const localVarPath = `/v1beta1/users/credentials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary WARNING: Hard delete of an User will remove all related projects and its resources.
         * @param {string} ref User\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: (ref, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'ref' is not null or undefined
            assertParamExists('deleteUser', 'ref', ref);
            const localVarPath = `/v1beta1/users/{ref}`
                .replace(`{${"ref"}}`, encodeURIComponent(String(ref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Gets User by reference
         * @param {string} ref User\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: (ref, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'ref' is not null or undefined
            assertParamExists('getUser', 'ref', ref);
            const localVarPath = `/v1beta1/users/{ref}`
                .replace(`{${"ref"}}`, encodeURIComponent(String(ref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Change or update fields in a resource
         * @param {string} ref User\&#39;s reference
         * @param {InlineObject5} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: (ref, body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'ref' is not null or undefined
            assertParamExists('updateUser', 'ref', ref);
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateUser', 'body', body);
            const localVarPath = `/v1beta1/users/{ref}`
                .replace(`{${"ref"}}`, encodeURIComponent(String(ref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessKeyId required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_id", configuration);
            // authentication AccessKeySecret required
            yield setApiKeyToObject(localVarHeaderParameter, "access_key_secret", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Creates a new User resource
         * @param {CreateUserRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createUser(body, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Creates a set of credentials
         * @param {CreateUserCredentialsRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserCredentials(body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createUserCredentials(body, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary WARNING: Hard delete of an User will remove all related projects and its resources.
         * @param {string} ref User\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(ref, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteUser(ref, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Gets User by reference
         * @param {string} ref User\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(ref, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUser(ref, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Change or update fields in a resource
         * @param {string} ref User\&#39;s reference
         * @param {InlineObject5} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(ref, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateUser(ref, body, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration, basePath, axios) {
    const localVarFp = UsersApiFp(configuration);
    return {
        /**
         *
         * @summary Creates a new User resource
         * @param {CreateUserRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(body, options) {
            return localVarFp.createUser(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates a set of credentials
         * @param {CreateUserCredentialsRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserCredentials(body, options) {
            return localVarFp.createUserCredentials(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary WARNING: Hard delete of an User will remove all related projects and its resources.
         * @param {string} ref User\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(ref, options) {
            return localVarFp.deleteUser(ref, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets User by reference
         * @param {string} ref User\&#39;s reference
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(ref, options) {
            return localVarFp.getUser(ref, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Change or update fields in a resource
         * @param {string} ref User\&#39;s reference
         * @param {InlineObject5} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(ref, body, options) {
            return localVarFp.updateUser(ref, body, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     *
     * @summary Creates a new User resource
     * @param {CreateUserRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    createUser(body, options) {
        return UsersApiFp(this.configuration).createUser(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Creates a set of credentials
     * @param {CreateUserCredentialsRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    createUserCredentials(body, options) {
        return UsersApiFp(this.configuration).createUserCredentials(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary WARNING: Hard delete of an User will remove all related projects and its resources.
     * @param {string} ref User\&#39;s reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    deleteUser(ref, options) {
        return UsersApiFp(this.configuration).deleteUser(ref, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets User by reference
     * @param {string} ref User\&#39;s reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUser(ref, options) {
        return UsersApiFp(this.configuration).getUser(ref, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Change or update fields in a resource
     * @param {string} ref User\&#39;s reference
     * @param {InlineObject5} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateUser(ref, body, options) {
        return UsersApiFp(this.configuration).updateUser(ref, body, options).then((request) => request(this.axios, this.basePath));
    }
}
