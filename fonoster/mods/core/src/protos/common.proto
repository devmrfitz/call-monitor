/**
 * MIT License
 * Copyright (c) 2022 Fonoster Inc
 *
 * This proto stores common messages for the fonoster platform.
 */
syntax = "proto3";

package fonoster.common.v1beta1;

option go_package = "github.com/fonoster/fonoster/gen/go/core/common/v1beta1";

import "protoc-gen-openapiv2/options/annotations.proto";

message Empty {}

enum View {
  BASIC = 0;
  STANDARD = 1;
  FULL = 2;
}

message ErrorResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    example: "{\"status\": 0, \"message\": \"string\"}"
  };
  int32 status = 1;
  string message = 2;
}

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  base_path: "/api"

  info: {
    title: "Fonoster"
    version: "v1beta1"
    contact: {
      name: "Fonoster OSS"
      url: "https://fonoster.com"
      email: "psanders@fonoster.com"
    }
    license: {
      name: "MIT License"
      url: "https://raw.githubusercontent.com/fonoster/fonoster/main/LICENSE"
    }
  }

  // Overwriting host entry breaks tests, so this is not done here.
  external_docs: {
    url: "https://github.com/fonoster/fonoster"
    description: "Github Repo"
  }

  schemes: HTTP

  schemes: HTTPS

  consumes: "application/json"

  produces: "application/json"

  security_definitions: {
    security: {
      key: "AccessKeyId"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "access_key_id"
      }
    }
    security: {
      key: "AccessKeySecret"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "access_key_secret"
      }
    }
  }

  security: {
    security_requirement: {
      key: "AccessKeyId"
      value: {}
    }
    security_requirement: {
      key: "AccessKeySecret"
      value: {}
    }
  }

  responses: {
    key: "default"
    value: {
      description: "User or system error."
      schema: {
        json_schema: {
          ref: ".fonoster.common.v1beta1.ErrorResponse"
        }
      }
    }
  }
};