"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decryptAesGcmSync = exports.decryptAesGcm = exports.encryptAesGcmSync = exports.encryptAesGcm = void 0;
const codec_1 = require("@47ng/codec");
let nodeCrypto;
if (typeof window === 'undefined') {
    nodeCrypto = require('crypto');
}
// --
async function encryptAesGcm(key, message) {
    if (typeof window === 'undefined') {
        return encryptAesGcmSync(key, message);
    }
    else {
        // Browser - use WebCrypto
        const buf = codec_1.utf8.encode(message);
        const iv = window.crypto.getRandomValues(new Uint8Array(12));
        const cipherText = await window.crypto.subtle.encrypt({
            name: 'AES-GCM',
            iv
        }, key, buf);
        return {
            text: new Uint8Array(cipherText),
            iv
        };
    }
}
exports.encryptAesGcm = encryptAesGcm;
/**
 * Available only for Node.js
 */
function encryptAesGcmSync(key, message) {
    // Node.js - Use native crypto module
    const iv = nodeCrypto.randomBytes(12);
    const cipher = nodeCrypto.createCipheriv('aes-256-gcm', key, iv);
    const encrypted = cipher.update(message, 'utf8');
    cipher.final();
    const tag = cipher.getAuthTag();
    return {
        // Authentication tag is the last 16 bytes
        // (for compatibility with WebCrypto serialization)
        text: new Uint8Array(Buffer.concat([encrypted, tag])),
        iv
    };
}
exports.encryptAesGcmSync = encryptAesGcmSync;
// --
async function decryptAesGcm(key, cipher) {
    if (typeof window === 'undefined') {
        return decryptAesGcmSync(key, cipher);
    }
    else {
        // Browser - use WebCrypto
        const buf = await window.crypto.subtle.decrypt({
            name: 'AES-GCM',
            iv: cipher.iv
        }, key, cipher.text);
        return codec_1.utf8.decode(new Uint8Array(buf));
    }
}
exports.decryptAesGcm = decryptAesGcm;
/**
 * Available only for Node.js.
 *
 * @param key
 * @param cipher
 * @returns
 */
function decryptAesGcmSync(key, cipher) {
    // Node.js - Use native crypto module
    const decipher = nodeCrypto.createDecipheriv('aes-256-gcm', key, cipher.iv);
    // Authentication tag is the last 16 bytes
    // (for compatibility with WebCrypto serialization)
    const tagStart = cipher.text.length - 16;
    const msg = cipher.text.slice(0, tagStart);
    const tag = cipher.text.slice(tagStart);
    decipher.setAuthTag(tag);
    return decipher.update(msg, undefined, 'utf8') + decipher.final('utf8');
}
exports.decryptAesGcmSync = decryptAesGcmSync;
