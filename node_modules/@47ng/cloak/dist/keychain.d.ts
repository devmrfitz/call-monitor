import { CloakKey, ParsedCloakKey } from './key';
import { CloakedString } from './message';
export interface KeychainEntry {
    key: ParsedCloakKey;
    createdAt: number;
    label?: string;
}
export declare type CloakKeychain = {
    [fingerprint: string]: KeychainEntry;
};
/**
 * Create a keychain holding the given list of keys.
 *
 * Runs everywhere (Node.js & browser).
 *
 * @param keys a list of keys to include in the keychain
 */
export declare function makeKeychain(keys: CloakKey[]): Promise<CloakKeychain>;
/**
 * Create a keychain holding the given list of keys.
 *
 * Available only for Node.js
 *
 * @param keys a list of keys to include in the keychain
 */
export declare function makeKeychainSync(keys: CloakKey[]): CloakKeychain;
/**
 * Decrypt and hydrate the given encrypted keychain.
 *
 * Runs everywhere (Node.js & browser).
 *
 * @param encryptedKeychain - A keychain as exported by exportKeychain
 * @param masterKey - The key used to encrypt the keychain
 */
export declare function importKeychain(encryptedKeychain: CloakedString, masterKey: CloakKey): Promise<CloakKeychain>;
/**
 * Decrypt and hydrate the given encrypted keychain.
 *
 * Available only for Node.js
 *
 * @param encryptedKeychain - A keychain as exported by exportKeychain
 * @param masterKey - The key used to encrypt the keychain
 */
export declare function importKeychainSync(encryptedKeychain: CloakedString, masterKey: CloakKey): CloakKeychain;
/**
 * Export a serialized and encrypted version of a keychain.
 *
 * Runs everywhere (Node.js & browser).
 *
 * @param keychain - The keychain to export
 * @param masterKey - The key to use to encrypt the keychain
 * @returns an encrypted keychain string
 */
export declare function exportKeychain(keychain: CloakKeychain, masterKey: CloakKey | ParsedCloakKey): Promise<CloakedString>;
/**
 * Export a serialized and encrypted version of a keychain
 *
 * Available only for Node.js
 *
 * @param keychain - The keychain to export
 * @param masterKey - The key to use to encrypt the keychain
 * @returns an encrypted keychain string
 */
export declare function exportKeychainSync(keychain: CloakKeychain, masterKey: CloakKey | ParsedCloakKey): CloakedString;
export declare function findKeyForMessage(message: CloakedString, keychain: CloakKeychain): ParsedCloakKey;
export declare function getKeyAge(fingerprint: string, keychain: CloakKeychain, now?: number): number;
