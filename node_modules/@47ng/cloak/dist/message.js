"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMessageKeyFingerprint = exports.decryptStringSync = exports.decryptString = exports.cloakedStringRegex = exports.encryptStringSync = exports.encryptString = exports.encodeEncryptedString = void 0;
const codec_1 = require("@47ng/codec");
const aes_gcm_1 = require("./ciphers/aes-gcm");
const key_1 = require("./key");
// Encryption --
function encodeEncryptedString(fingerprint, iv, ciphertext) {
    return [
        'v1',
        'aesgcm256',
        fingerprint,
        codec_1.b64.encode(iv),
        codec_1.b64.encode(ciphertext)
    ].join('.');
}
exports.encodeEncryptedString = encodeEncryptedString;
async function encryptString(input, key) {
    if (typeof key === 'string') {
        key = await (0, key_1.parseKey)(key, 'encrypt');
    }
    const { text: ciphertext, iv } = await (0, aes_gcm_1.encryptAesGcm)(key.raw, input);
    return encodeEncryptedString(key.fingerprint, iv, ciphertext);
}
exports.encryptString = encryptString;
function encryptStringSync(input, key) {
    if (typeof key === 'string') {
        key = (0, key_1.parseKeySync)(key);
    }
    const { text: ciphertext, iv } = (0, aes_gcm_1.encryptAesGcmSync)(key.raw, input);
    return encodeEncryptedString(key.fingerprint, iv, ciphertext);
}
exports.encryptStringSync = encryptStringSync;
// Decryption --
exports.cloakedStringRegex = /^v1\.aesgcm256\.(?<fingerprint>[0-9a-fA-F]{8})\.(?<iv>[a-zA-Z0-9-_]{16})\.(?<ciphertext>[a-zA-Z0-9-_]{22,})={0,2}$/;
async function decryptString(input, key) {
    const match = input.match(exports.cloakedStringRegex);
    if (!match) {
        throw new Error(`Unknown message format: ${input}`);
    }
    const iv = match.groups.iv;
    const ciphertext = match.groups.ciphertext;
    let aesKey;
    if (typeof key === 'string') {
        aesKey = await (0, key_1.importKey)(key, 'decrypt');
    }
    else {
        aesKey = key.raw;
    }
    return await (0, aes_gcm_1.decryptAesGcm)(aesKey, {
        iv: codec_1.b64.decode(iv),
        text: codec_1.b64.decode(ciphertext)
    });
}
exports.decryptString = decryptString;
function decryptStringSync(input, key) {
    const match = input.match(exports.cloakedStringRegex);
    if (!match) {
        throw new Error(`Unknown message format: ${input}`);
    }
    const iv = match.groups.iv;
    const ciphertext = match.groups.ciphertext;
    let aesKey;
    if (typeof key === 'string') {
        aesKey = (0, key_1.importKeySync)(key);
    }
    else {
        aesKey = key.raw;
    }
    return (0, aes_gcm_1.decryptAesGcmSync)(aesKey, {
        iv: codec_1.b64.decode(iv),
        text: codec_1.b64.decode(ciphertext)
    });
}
exports.decryptStringSync = decryptStringSync;
function getMessageKeyFingerprint(message) {
    const match = message.match(exports.cloakedStringRegex);
    if (!match) {
        throw new Error('Unknown message format');
    }
    return match.groups.fingerprint;
}
exports.getMessageKeyFingerprint = getMessageKeyFingerprint;
