import { APIClient, ClientOptions } from "@fonoster/common";
import MonitorPB from "../service/protos/monitor_pb";
import { IMonitorClient, SearchEventsRequest, SearchEventsResponse } from "./types";
/**
 * @classdesc Use Fonoster Monitor, a capability of Fonoster to obtain user events.
 * The Monitor API requires of a running Fonoster deployment.
 *
 * @extends APIClient
 * @example
 *
 * const Fonoster = require("@fonoster/monitor")
 * const monitor = new Fonoster.Monitor()
 *
 * const request = {
 *   query: {}
 * }
 *
 * monitor.searchEvents(request)
 * .then(result => {
 *   console.log(result)             // successful response
 * }).catch(e => console.error(e))   // an error occurred
 */
export default class Monitor extends APIClient implements IMonitorClient {
    /**
     * Constructs a new Monitor API object.
     *
     * @param {ClientOptions} options - Options to indicate the objects endpoint
     * @see module:core:APIClient
     */
    constructor(options?: ClientOptions);
    /**
     * Search for User events.
     *
     * @param {SearchEventsRequest} request - Request for obtain user events
     * @param {object} request.query - Friendly name for the SIP device
     * @return {Promise<SearchEventsResponse>}
     * @example
     *
     * const request = {
     *   query: {}
     * }
     *
     * monitor.searchEvents(request)
     * .then(result => {
     *   console.log(result)             // successful response
     * }).catch(e => console.error(e))   // an error occurred
     */
    searchEvents(request: SearchEventsRequest): Promise<SearchEventsResponse>;
}
export { MonitorPB, IMonitorClient };
