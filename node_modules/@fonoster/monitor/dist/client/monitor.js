"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonitorPB = void 0;
/*
 * Copyright (C) 2023 by Fonoster Inc (https://fonoster.com)
 * http://github.com/fonoster/fonoster
 *
 * This file is part of Fonoster
 *
 * Licensed under the MIT License (the "License");
 * you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *    https://opensource.org/licenses/MIT
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const common_1 = require("@fonoster/common");
const monitor_grpc_pb_1 = require("../service/protos/monitor_grpc_pb");
const monitor_pb_1 = __importDefault(require("../service/protos/monitor_pb"));
exports.MonitorPB = monitor_pb_1.default;
const grpc_promise_1 = require("grpc-promise");
const struct_pb_1 = require("google-protobuf/google/protobuf/struct_pb");
const level_1 = require("../service/level");
const event_type_1 = require("../service/event_type");
/**
 * @classdesc Use Fonoster Monitor, a capability of Fonoster to obtain user events.
 * The Monitor API requires of a running Fonoster deployment.
 *
 * @extends APIClient
 * @example
 *
 * const Fonoster = require("@fonoster/monitor")
 * const monitor = new Fonoster.Monitor()
 *
 * const request = {
 *   query: {}
 * }
 *
 * monitor.searchEvents(request)
 * .then(result => {
 *   console.log(result)             // successful response
 * }).catch(e => console.error(e))   // an error occurred
 */
class Monitor extends common_1.APIClient {
    /**
     * Constructs a new Monitor API object.
     *
     * @param {ClientOptions} options - Options to indicate the objects endpoint
     * @see module:core:APIClient
     */
    constructor(options) {
        super(monitor_grpc_pb_1.MonitorClient, options);
        super.init();
        (0, grpc_promise_1.promisifyAll)(super.getService(), { metadata: super.getMeta() });
    }
    /**
     * Search for User events.
     *
     * @param {SearchEventsRequest} request - Request for obtain user events
     * @param {object} request.query - Friendly name for the SIP device
     * @return {Promise<SearchEventsResponse>}
     * @example
     *
     * const request = {
     *   query: {}
     * }
     *
     * monitor.searchEvents(request)
     * .then(result => {
     *   console.log(result)             // successful response
     * }).catch(e => console.error(e))   // an error occurred
     */
    async searchEvents(request) {
        const req = new monitor_pb_1.default.SearchEventsRequest();
        req.setQuery(struct_pb_1.Struct.fromJavaScript(request.query));
        const result = await super
            .getService()
            .searchEvents()
            .sendMessage(req, super.getMeta());
        return {
            nextPageToken: null,
            events: result.map((e) => {
                return {
                    ref: e.getRef(),
                    level: level_1.Level.toString(e.getLevel()),
                    eventType: event_type_1.EventType.toString(e.getEventType()),
                    message: e.getMessage(),
                    timestamp: new Date(e.getTimestamp()),
                    body: e.getBody().toJavaScript()
                };
            })
        };
    }
}
exports.default = Monitor;
// WARNING: Workaround for support to commonjs clients
module.exports = Monitor;
module.exports.MonitorPB = monitor_pb_1.default;
