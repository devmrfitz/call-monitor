"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AgentsService = exports.default = void 0;
const agents_pb_1 = require("./protos/agents_pb");
const common_pb_1 = require("./protos/common_pb");
const agents_grpc_pb_1 = require("./protos/agents_grpc_pb");
Object.defineProperty(exports, "AgentsService", { enumerable: true, get: function () { return agents_grpc_pb_1.AgentsService; } });
const core_1 = require("@fonoster/core");
const core_2 = require("@fonoster/core");
const decoder_1 = __importDefault(require("./decoder"));
class AgentsServer {
    async listAgents(call, callback) {
        const result = await core_2.ResourceServer.listResources(core_1.Kind.AGENT, call);
        const response = new agents_pb_1.ListAgentsResponse();
        if (result && result.resources) {
            const domains = result.resources.map((resource) => (0, decoder_1.default)(resource));
            response.setNextPageToken(result.nextPageToken + "");
            response.setAgentsList(domains);
        }
        callback(null, response);
    }
    async createAgent(call, callback) {
        try {
            const privacy = call.request.getPrivacy() === core_1.Privacy.PRIVATE
                ? core_1.Privacy.PRIVATE
                : core_1.Privacy.NONE;
            const resource = new core_1.ResourceBuilder(core_1.Kind.AGENT, call.request.getName())
                .withCredentials(call.request.getUsername(), call.request.getSecret())
                .withDomains(call.request.getDomainsList())
                .withPrivacy(privacy)
                .withMetadata({ accessKeyId: (0, core_2.getAccessKeyId)(call) })
                .build();
            const response = await (0, core_2.createResource)(resource);
            callback(null, (0, decoder_1.default)(response));
        }
        catch (e) {
            callback(e, null);
        }
    }
    async updateAgent(call, callback) {
        try {
            const agent = (await core_2.ResourceServer.getResource(core_1.Kind.AGENT, call));
            const privacy = call.request.getPrivacy() === core_1.Privacy.PRIVATE
                ? core_1.Privacy.PRIVATE
                : core_1.Privacy.NONE;
            const resource = new core_1.ResourceBuilder(core_1.Kind.AGENT, call.request.getName(), call.request.getRef())
                .withCredentials(agent?.spec?.credentials?.username, call.request.getSecret())
                .withPrivacy(privacy)
                .build();
            const result = await (0, core_2.updateResource)({
                resource,
                accessKeyId: (0, core_2.getAccessKeyId)(call)
            });
            callback(null, (0, decoder_1.default)(result));
        }
        catch (e) {
            callback(e, null);
        }
    }
    async getAgent(call, callback) {
        try {
            const result = await core_2.ResourceServer.getResource(core_1.Kind.AGENT, call);
            callback(null, (0, decoder_1.default)(result));
        }
        catch (e) {
            callback(e, null);
        }
    }
    async deleteAgent(call, callback) {
        try {
            await core_2.ResourceServer.deleteResource(core_1.Kind.AGENT, call);
            callback(null, new common_pb_1.Empty());
        }
        catch (e) {
            callback(e, null);
        }
    }
}
exports.default = AgentsServer;
