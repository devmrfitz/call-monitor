import { APIClient, ClientOptions } from "@fonoster/common";
import { Privacy } from "@fonoster/core";
import { Agent, CreateAgentRequest, CreateAgentResponse, DeleteAgentResponse, GetAgentResponse, IAgentsClient, ListAgentsRequest, ListAgentsResponse, UpdateAgentRequest, UpdateAgentResponse } from "./types";
import AgentsPB from "../service/protos/agents_pb";
import CommonPB from "../service/protos/common_pb";
/**
 * @classdesc Use Fonoster Agents, a capability of Fonoster SIP Proxy subsystem,
 * to create, update, get and delete Agents. Agents requires of a
 * running Fonoster deployment.
 *
 * @extends APIClient
 * @example
 *
 * const Fonoster = require("@fonoster/sdk")
 * const agents = new Fonoster.Agents()
 *
 * const request = {
 *   name: "John Doe",
 *   username: "john",
 *   secret: "1234",
 *   domains: ["sip.local"]
 * }
 *
 * agents.createAgent(request)
 * .then(result => {
 *   console.log(result)             // successful response
 * }).catch(e => console.error(e))   // an error occurred
 */
export default class Agents extends APIClient implements IAgentsClient {
    /**
     * Constructs a new Agents object.
     *
     * @param {ClientOptions} options - Options to indicate the objects endpoint
     * @see module:core:APIClient
     */
    constructor(options?: ClientOptions);
    /**
     * Creates a new Agent on the SIP Proxy subsystem.
     *
     * @param {CreateAgentRequest} request -  Request for the provision of a new Agent
     * @param {string} request.name - Friendly name for the SIP device
     * @param {string} request.username -Agent's credential username
     * @param {string} request.secret - Agent's credential secret
     * @param {Privacy} request.privacy - If set to Privacy.PRIVATE Fonoster removes
     * identifiable information for the requests. Defaults to Privacy.NONE
     * @param {string[]} request.domains - List of domains this Agent has access to
     * @return {Promise<CreateAgentResponse>}
     * @example
     *
     * const request = {
     *   name: "John Doe",
     *   username: "john",
     *   secret: "1234",
     *   domains: ["sip.local"]
     *   privacy: Privacy.PRIVATE
     * }
     *
     * agents.createAgent(request)
     * .then(result => {
     *   console.log(result)            // returns the CreateAgentResponse interface
     * }).catch(e => console.error(e))  // an error occurred
     */
    createAgent(request: CreateAgentRequest): Promise<CreateAgentResponse>;
    /**
     * Retrives an Agent by reference.
     *
     * @param {string} ref - Reference to Agent
     * @return {Promise<GetAgentResponse>} The agent
     * @throws if ref is null or Agent does not exist
     * @example
     *
     * const ref = "aynB1z0tzd";
     *
     * agents.getAgent(ref)
     * .then(result => {
     *   console.log(result)             // returns the GetAgentResponse interface
     * }).catch(e => console.error(e))   // an error occurred
     */
    getAgent(ref: string): Promise<GetAgentResponse>;
    /**
     * Update an Agent at the SIP Proxy subsystem.
     *
     * @param {UpdateAgentRequest} request - Request update of an Agent
     * @param {string} request.ref - Reference to the Agent
     * @param {string} request.name - Friendly name for the SIP device
     * @param {string} request.secret - Agent's credential secret
     * @return {Promise<UpdateAgentResponse>}
     * @example
     *
     * const request = {
     *   name: "John Dee",
     *   secret: "12345"
     * }
     *
     * agents.updateAgent(request)
     * .then(result => {
     *   console.log(result)            // returns the UpdateAgentResponse interface
     * }).catch(e => console.error(e))  // an error occurred
     */
    updateAgent(request: UpdateAgentRequest): Promise<UpdateAgentResponse>;
    /**
     * List registered Agents in Fonoster SIP Proxy subsystem.
     *
     * @param {ListAgentsRequest} request - Optional parameter with size and
     * token for the request
     * @param {number} request.pageSize - Elements per page
     * (defaults to 20)
     * @param {string} request.pageToken - The next_page_token value returned from
     * a previous List request, if any
     * @return {Promise<ListAgentsResponse>} Paginated List of Agents
     * @example
     *
     * const request = {
     *    pageSize: 20,
     *    pageToken: 2
     * }
     *
     * agents.listAgents(request)
     * .then(() => {
     *   console.log(result)            // returns a ListAgentsResponse interface
     * }).catch(e => console.error(e))  // an error occurred
     */
    listAgents(request: ListAgentsRequest): Promise<ListAgentsResponse>;
    /**
     * Deletes an Agent from the SIP Proxy subsystem.
     *
     * @param {string} ref - Agent's reference
     * @example
     *
     * const ref = "aynB1z0tzd"
     *
     * agents.deleteAgent(ref)
     * .then(() => {
     *   console.log("done")            // returns a reference of the Agent
     * }).catch(e => console.error(e))  // an error occurred
     */
    deleteAgent(ref: string): Promise<DeleteAgentResponse>;
}
export { Agent, Privacy, AgentsPB, CommonPB, IAgentsClient };
