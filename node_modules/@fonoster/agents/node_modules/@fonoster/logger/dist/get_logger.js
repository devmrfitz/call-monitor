"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = exports.getLogger = void 0;
/*
 * Copyright (C) 2023 by Fonoster Inc (https://fonoster.com)
 * http://github.com/fonoster/fonoster
 *
 * This file is part of Fonoster
 *
 * Licensed under the MIT License (the "License");
 * you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *    https://opensource.org/licenses/MIT
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const path_1 = require("path");
const envs_1 = require("./envs");
const winston_1 = __importDefault(require("winston"));
const loggers = new Map();
const getLogger = (config) => {
    const key = config.service || "default";
    if (loggers.has(key)) {
        return loggers.get(key);
    }
    const file = config.filePath.replace((0, path_1.resolve)("./"), "");
    const humanFormat = winston_1.default.format.combine(winston_1.default.format.timestamp({
        format: "YYYY-MM-dd HH:mm:ss.SSS"
    }), winston_1.default.format.printf(({ level, message, timestamp, ...metadata }) => `${timestamp} [${level}]: ${config.service ? `(${config.service})` : ""} ${file} ${message} ${JSON.stringify(metadata)}`));
    const newLogger = winston_1.default.createLogger({
        levels: winston_1.default.config.npm.levels,
        format: humanFormat,
        transports: envs_1.transports,
        level: envs_1.level
    });
    newLogger.on("finish", () => {
        envs_1.fluent.sender.end("end", {}, () => { });
    });
    // Store the new logger in the map
    loggers.set(key, newLogger);
    return newLogger;
};
exports.getLogger = getLogger;
exports.default = exports.getLogger;
