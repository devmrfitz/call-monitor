"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (C) 2023 by Fonoster Inc (https://fonoster.com)
 * http://github.com/fonoster/fonoster
 *
 * This file is part of Fonoster
 *
 * Licensed under the MIT License (the "License");
 * you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *    https://opensource.org/licenses/MIT
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const jwt_payload_1 = __importDefault(require("./jwt_payload"));
const logger_1 = __importDefault(require("@fonoster/logger"));
class AuthUtils {
    handler;
    constructor(handler) {
        this.handler = handler;
    }
    validateTokenData = (payload) => {
        if (!payload ||
            !payload.iss ||
            !payload.accessKeyId ||
            !payload.iss ||
            !payload.role)
            throw new Error("Invalid Access Token");
        return true;
    };
    createToken = async (accessKeyId, issuer, role, privateKey, expiration) => {
        const accessToken = await this.handler.encode(new jwt_payload_1.default(issuer, role, accessKeyId), privateKey, expiration);
        if (!accessToken)
            throw new Error("Error creating token");
        return {
            accessToken: accessToken
        };
    };
    validateToken = async (token, privateKey) => {
        let result = false;
        try {
            const accessTokenData = await this.handler.decode(token.accessToken, privateKey);
            if (accessTokenData) {
                result = true;
            }
            return {
                data: accessTokenData,
                isValid: result
            };
        }
        catch (e) {
            logger_1.default.log("error", "@fonoster/auth [Error decoding token]");
        }
        return {
            isValid: result
        };
    };
}
exports.default = AuthUtils;
