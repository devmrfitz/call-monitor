"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (C) 2023 by Fonoster Inc (https://fonoster.com)
 * http://github.com/fonoster/fonoster
 *
 * This file is part of Fonoster
 *
 * Licensed under the MIT License (the "License");
 * you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *    https://opensource.org/licenses/MIT
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const fs_1 = __importDefault(require("fs"));
const util_1 = __importDefault(require("util"));
const text_to_speech_1 = __importDefault(require("@google-cloud/text-to-speech"));
const tts_1 = require("@fonoster/tts");
const logger_1 = __importDefault(require("@fonoster/logger"));
const utils_1 = require("./utils");
const merge = require("deepmerge");
const defaultVoice = { languageCode: "en-US", ssmlGender: "NEUTRAL" };
/**
 * @classdesc Optional TTS engine for Fonoster.
 *
 * @extends AbstractTTS
 * @example
 * const GoogleTTS = require("@fonoster/googletts");
 *
 * new GoogleTTS().synthesize("Hello world")
 *  .then((result) => console.log("path: " + result.pathToFile))
 *  .catch(console.error);
 */
class GoogleTTS extends tts_1.AbstractTTS {
    client;
    /**
     * Constructs a new GoogleTTS object.
     *
     * @see module:tts:AbstractTTS
     */
    constructor(config) {
        super("tts", "googletts", config);
        this.client = new text_to_speech_1.default.TextToSpeechClient(config);
    }
    /**
     * @inherit
     */
    async synthesizeSpeech(text, options, filename, pathToFile) {
        logger_1.default.verbose(`@fonoster/tts.GoogleTTS.synthesize [input: ${text}, isSSML=${(0, utils_1.isSSML)(text)} options: ${JSON.stringify(options)}]`);
        const voice = merge(defaultVoice, options || {});
        const input = (0, utils_1.isSSML)(text) ? { ssml: text } : { text: text };
        const request = {
            voice,
            input,
            audioConfig: { audioEncoding: "LINEAR16" }
        };
        // Performs the text-to-speech request
        const [response] = await this.client.synthesizeSpeech(request);
        // Write the binary audio content to a local file
        const writeFile = util_1.default.promisify(fs_1.default.writeFile);
        await writeFile(pathToFile, response.audioContent, "binary");
        return { filename, pathToFile };
    }
}
exports.default = GoogleTTS;
// WARNING: Workaround to support commonjs clients
module.exports = GoogleTTS;
