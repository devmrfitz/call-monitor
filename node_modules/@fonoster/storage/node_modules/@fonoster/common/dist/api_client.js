"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (C) 2023 by Fonoster Inc (https://fonoster.com)
 * http://github.com/fonoster/fonoster
 *
 * This file is part of Fonoster
 *
 * Licensed under the MIT License (the "License");
 * you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *    https://opensource.org/licenses/MIT
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const trust_util_1 = require("./trust_util");
const grpc_js_1 = require("@grpc/grpc-js");
const envs_1 = require("./envs");
const CONFIG_FILE = path.join(require("os").homedir(), ".fonoster", "config");
const configFileExit = () => fs.existsSync(CONFIG_FILE);
const getConfigFile = () => JSON.parse(fs.readFileSync(CONFIG_FILE).toString());
const defaultOptions = {
    endpoint: envs_1.APISERVER_ENDPOINT || "api.fonoster.io",
    accessKeyId: envs_1.APISERVER_ACCESS_KEY_ID,
    accessKeySecret: envs_1.APISERVER_ACCESS_KEY_SECRET
};
class default_1 {
    options;
    metadata;
    ServiceClient;
    service;
    /**
     * Use the Options object to overwrite the service default configuration.
     * @typedef {ClientOptions} Options
     * @property {string} endpoint - The endpoint URI to send requests to.
     * The endpoint should be a string like '{serviceHost}:{servicePort}'.
     * @property {string} accessKeyId - your Fonoster access key ID.
     * @property {string} accessKeySecret - your Fonoster secret access key.
     * @property {string} bucket - The bucket to upload apps and media files.
     */
    /**
     * Constructs a service object.
     *
     * @param {Options} options - Overwrite for the service's defaults configuration.
     */
    constructor(ServiceClient, options) {
        this.ServiceClient = ServiceClient;
        this.options = options;
    }
    init() {
        try {
            if (!this.options && configFileExit()) {
                this.options = getConfigFile();
            }
        }
        catch (err) {
            throw new Error(`Malformed config file found at: ${CONFIG_FILE}`);
        }
        if (!this.options) {
            this.options = defaultOptions;
        }
        if (!this.options.accessKeyId || !this.options.accessKeySecret) {
            throw new Error("Not valid credentials found");
        }
        this.metadata = new grpc_js_1.Metadata();
        this.metadata.add("access_key_id", this.options.accessKeyId);
        this.metadata.add("access_key_secret", this.options.accessKeySecret);
        this.service = new this.ServiceClient(this.options.endpoint || defaultOptions.endpoint, (0, trust_util_1.getClientCredentials)());
    }
    getOptions() {
        return this.options;
    }
    getService() {
        return this.service;
    }
    getMeta() {
        return this.metadata;
    }
}
exports.default = default_1;
