"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (C) 2023 by Fonoster Inc (https://fonoster.com)
 * http://github.com/fonoster/fonoster
 *
 * This file is part of Fonoster
 *
 * Licensed under the MIT License (the "License");
 * you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *    https://opensource.org/licenses/MIT
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const grpc = __importStar(require("@grpc/grpc-js"));
const errors_1 = require("@fonoster/errors");
const storage_1 = require("../utils/storage");
const envs_1 = require("../envs");
const logger_1 = __importDefault(require("@fonoster/logger"));
async function default_1(accessKeyId, bucket, filename) {
    logger_1.default.log("debug", `@fonoster/core getObjectURL [bucket: ${bucket}, filename: ${filename}, accessKeId: ${accessKeyId}}]`);
    return new Promise((resolve, reject) => {
        (0, storage_1.fsInstance)().statObject(bucket, `${accessKeyId}/${filename}`, (err) => {
            if (err) {
                reject(new errors_1.FonosterError(`${err.message}: filename ${accessKeyId}/${filename} in bucket '${bucket}'`, grpc.status.NOT_FOUND));
                return;
            }
            resolve(`http://${envs_1.APISERVER_S3_SERVER_HOST}:${envs_1.APISERVER_S3_SERVER_PORT}/${bucket}/${accessKeyId}/${filename}`);
        });
    });
}
exports.default = default_1;
