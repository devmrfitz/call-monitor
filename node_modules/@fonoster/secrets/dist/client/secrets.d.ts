import { APIClient, ClientOptions } from "@fonoster/common";
import SecretPB from "../service/protos/secrets_pb";
import CommonPB from "../service/protos/common_pb";
import { CreateSecretRequest, CreateSecretResponse, GetSecretResponse, ISecretsClient, ListSecretsRequest, ListSecretsResponse, Secret } from "./types";
/**
 * @classdesc Use Fonoster Secrets, a capability of Fonoster Secrets Service,
 * to create and manage your secrets. Fonoster Secrets requires of a
 * running Fonoster deployment.
 *
 * @extends APIClient
 * @example
 *
 * const Fonoster = require("@fonoster/sdk")
 * const secrets = new Fonoster.Secrets()
 *
 * const request = {
 *    secretName: "my-secret",
 *    secret: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
 * };
 *
 * secrets.createSecret(request)
 * .then(result => {
 *   console.log(result) // message with the CreateSecretResponse interface
 * }).catch(e => console.error(e)); // an error occurred
 */
export default class Secrets extends APIClient implements ISecretsClient {
    /**
     * Constructs a Secrets Object.
     *
     * @param {ClientOptions} options - Options to indicate the objects endpoint
     * @see module:core:APIClient
     */
    constructor(options?: ClientOptions);
    /**
     * Creates and stores a new secret.
     *
     * @param {CreateSecretRequest} request - Request to create a new secret
     * @param {string} request.name - Friendly name for the secret
     * @param {string} request.secret - Actual secret
     * @return {Promise<CreateSecretResponse>}
     * @example
     *
     * const request = {
     *    name: "my-secret",
     *    secret: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
     * };
     *
     * secrets.createSecret(request)
     * .then(result => {
     *   console.log(result) // returns the CreateDomainResponse interface
     * }).catch(e => console.error(e)); // an error occurred
     */
    createSecret(request: CreateSecretRequest): Promise<CreateSecretResponse>;
    /**
     * Gets a secret by name.
     *
     * @param {CreateSecretRequest} request - Request to create a new Secret
     * @param {string} request.name - Friendly name for the Secret
     * @param {string} request.secret - Secret to save
     * @return {Promise<CreateSecretResponse>}
     * @example
     *
     * const request = {
     *    name: "my-secret",
     *    secret: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
     * };
     *
     * secrets.createSecret(request)
     * .then(result => {
     *   console.log(result) // returns the GetSecretResponse interface
     * }).catch(e => console.error(e)); // an error occurred
     */
    getSecret(name: string): Promise<GetSecretResponse>;
    /**
     * List all the secrets for current Project.
     *
     * @param {ListSecretRequest} request - Request for the provision of
     * a new Secret
     * @param {string} request.name - Friendly name for the Secret
     * @param {string} request.secret - secret to be save
     * @return {Promise<ListSecretResponse>}
     * @example
     *
     * const request = {
     *    pageSize: 1,
     *    pageToken: 1
     * };
     *
     * secrets.listSecrets(request)
     * .then(result => {
     *   console.log(result)
     * }).catch(e => console.error(e)); // an error occurred
     */
    listSecrets(request: ListSecretsRequest): Promise<ListSecretsResponse>;
    /**
     * Removes a secret by name.
     *
     * @param {string} name - Secret name
     * @example
     *
     * secrets.deleteSecret("my-secret")
     * .then(() => {
     *   console.log("successful")
     * }).catch(e => console.error(e)); // an error occurred
     */
    deleteSecret(name: string): Promise<void>;
}
export { Secret, SecretPB, CommonPB, ISecretsClient };
