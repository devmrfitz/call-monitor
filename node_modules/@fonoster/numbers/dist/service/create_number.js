"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@fonoster/core");
const decoder_1 = __importDefault(require("./decoder"));
const assertions_1 = require("./assertions");
const utils_1 = require("./utils");
const envs_1 = require("../envs");
async function createNumber(request, call) {
    // TODO: Needs resource ownership validation for appRef
    request.setE164Number((0, assertions_1.assertIsE164)(request.getE164Number()));
    (0, assertions_1.assertHasAorLinkOrIngressInfo)(request);
    (0, assertions_1.assertCompatibleParameters)(request);
    (0, assertions_1.assertWebhookIsURL)(request.getIngressInfo()?.getWebhook());
    let encoder = new core_1.ResourceBuilder(core_1.Kind.NUMBER, request.getE164Number())
        .withGatewayRef(request.getProviderRef())
        .withMetadata({ accessKeyId: (0, core_1.getAccessKeyId)(call) });
    if (request.getAorLink()) {
        encoder = encoder.withLocation(`tel:${request.getE164Number()}`, request.getAorLink());
    }
    else {
        encoder = encoder
            .withLocation(`tel:${request.getE164Number()}`, envs_1.APISERVER_ASTERISK_SIP_ENDPOINT)
            .withMetadata({
            webhook: (0, utils_1.getWebhook)(request),
            appRef: (0, utils_1.getAppRef)(request),
            accessKeyId: (0, core_1.getAccessKeyId)(call)
        });
    }
    await core_1.routr.connect();
    const resource = encoder.build();
    const ref = await core_1.routr.resourceType("numbers").create(resource);
    // We do this to get updated metadata from Routr
    const jsonObj = await core_1.routr.resourceType("numbers").get(ref);
    return (0, decoder_1.default)(jsonObj);
}
exports.default = createNumber;
