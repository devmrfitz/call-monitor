"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable require-jsdoc */
/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
const core_1 = require("@fonoster/core");
const decoder_1 = __importDefault(require("./decoder"));
const decoder_2 = __importDefault(require("./decoder"));
const assertions_1 = require("./assertions");
const utils_1 = require("./utils");
const envs_1 = require("../envs");
async function updateNumber(call, callback) {
    const request = call.request;
    try {
        (0, assertions_1.assertHasAorLinkOrIngressInfo)(request);
        (0, assertions_1.assertCompatibleParameters)(request);
        (0, assertions_1.assertWebhookIsURL)(request.getIngressInfo()?.getWebhook());
        const objectFromDB = (0, decoder_2.default)(await core_1.ResourceServer.getResource(core_1.Kind.NUMBER, call));
        let encoder = new core_1.ResourceBuilder(core_1.Kind.NUMBER, objectFromDB.getE164Number(), objectFromDB.getRef());
        if (request.getAorLink()) {
            encoder = encoder
                .withLocation(`tel:${objectFromDB.getE164Number()}`, request.getAorLink())
                .withMetadata({
                gwRef: request.getProviderRef(),
                createdOn: objectFromDB.getCreateTime()
            });
        }
        else {
            encoder = encoder
                .withLocation(`tel:${objectFromDB.getE164Number()}`, envs_1.APISERVER_ASTERISK_SIP_ENDPOINT)
                .withMetadata({
                webhook: (0, utils_1.getWebhook)(request),
                appRef: (0, utils_1.getAppRef)(request),
                gwRef: objectFromDB.getProviderRef(),
                createdOn: objectFromDB.getCreateTime()
            });
        }
        await core_1.routr.connect();
        const ref = await core_1.routr.resourceType("numbers").update(encoder.build());
        // We do this to get updated metadata from Routr
        const jsonObj = await core_1.routr.resourceType("numbers").get(ref);
        callback(null, (0, decoder_1.default)(jsonObj));
    }
    catch (err) {
        return callback(err);
    }
}
exports.default = updateNumber;
