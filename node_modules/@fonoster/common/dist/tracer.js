"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.init = void 0;
/*
 * Copyright (C) 2022 by Fonoster Inc (https://fonoster.com)
 * http://github.com/fonoster/fonoster
 *
 * This file is part of Fonoster
 *
 * Licensed under the MIT License (the "License");
 * you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *    https://opensource.org/licenses/MIT
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const api_1 = require("@opentelemetry/api");
api_1.diag.setLogger(new api_1.DiagConsoleLogger(), getLogLevel());
const api_2 = __importDefault(require("@opentelemetry/api"));
const instrumentation_1 = require("@opentelemetry/instrumentation");
const sdk_trace_node_1 = require("@opentelemetry/sdk-trace-node");
const resources_1 = require("@opentelemetry/resources");
const semantic_conventions_1 = require("@opentelemetry/semantic-conventions");
const sdk_trace_base_1 = require("@opentelemetry/sdk-trace-base");
const exporter_jaeger_1 = require("@opentelemetry/exporter-jaeger");
const instrumentation_grpc_1 = require("@opentelemetry/instrumentation-grpc");
function getLogLevel() {
    switch (process.env.LOGS_LEVEL?.toLowerCase()) {
        case "debug":
            return api_1.DiagLogLevel.DEBUG;
        case "info":
            return api_1.DiagLogLevel.INFO;
        case "warn":
            return api_1.DiagLogLevel.WARN;
        case "error":
            return api_1.DiagLogLevel.ERROR;
        default:
            return api_1.DiagLogLevel.NONE;
    }
}
const init = (serviceName) => {
    const provider = new sdk_trace_node_1.NodeTracerProvider({
        resource: new resources_1.Resource({
            [semantic_conventions_1.SemanticResourceAttributes.SERVICE_NAME]: serviceName
        })
    });
    const exporter = new exporter_jaeger_1.JaegerExporter({
        endpoint: process.env.TRACING_ENDPOINT || "http://localhost:14268/api/traces"
    });
    provider.addSpanProcessor(new sdk_trace_base_1.SimpleSpanProcessor(exporter));
    provider.register();
    (0, instrumentation_1.registerInstrumentations)({
        instrumentations: [new instrumentation_grpc_1.GrpcInstrumentation()]
    });
    return api_2.default.trace.getTracer("fonoster-tracer");
};
exports.init = init;
