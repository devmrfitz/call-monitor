import { APIClient, ClientOptions } from "@fonoster/common";
import ProjectsPB from "../service/protos/projects_pb";
import CommonPB from "../service/protos/common_pb";
import { CreateProjectRequest, CreateProjectResponse, DeleteProjectResponse, GetProjectResponse, UpdateProjectRequest, UpdateProjectResponse, RenewAccessKeySecretRequest, RenewAccessKeySecretResponse, IProjectsClient, ListProjectsRequest, ListProjectsResponse } from "./types";
/**
 * @classdesc Use Fonoster Projects, a capability of Fonoster,
 * to create, update, get and delete Projects. Projects requires of a
 * running Fonoster deployment.
 *
 * @extends APIClient
 * @example
 *
 * const Fonoster = require("@fonoster/sdk")
 * const Projects = new Fonoster.Projects()
 *
 * const request = {
 *   name: "project002",
 *   allowExperiments: false
 * }
 *
 * projects.createProject(request)
 * .then(result => {
 *   console.log(result)             // successful response
 * }).catch(e => console.error(e))   // an error occurred
 */
export default class Projects extends APIClient implements IProjectsClient {
    /**
     * Constructs a new Projects object.
     *
     * @param {ClientOptions} options - Options to indicate the objects endpoint
     * @see module:core:APIClient
     */
    constructor(options?: ClientOptions);
    /**
     * Returns a list of Projects
     *
     * @param {ListProjectsRequest} request - Reserved for future filters
     * @return {Promise<ListProjectsResponse>}
     * @example
     *
     * projects.listProjects({})
     * .then(result => {
     *   console.log(result)             // successful response
     * }).catch(e => console.error(e))   // an error occurred
     */
    listProjects(request?: ListProjectsRequest): Promise<ListProjectsResponse>;
    /**
     * Creates a new Project.
     *
     * @param {CreateProjectRequest} request -  Request to create a new Project
     * @param {string} request.name - Project's name
     * @param {string} request.allowExperiments - Enables experimental APIs
     * @return {Promise<CreateProjectResponse>}
     * @example
     *
     * const request = {
     *   name: "project001",
     *   allowExperiments: true
     * }
     *
     * projects.createProject(request)
     * .then(result => {
     *   console.log(result)             // successful response
     * }).catch(e => console.error(e))   // an error occurred
     */
    createProject(request: CreateProjectRequest): Promise<CreateProjectResponse>;
    /**
     * Get a Project by reference.
     *
     * @param {string} ref - Reference to Project
     * @return {Promise<GetProjectResponse>} The Project
     * @throws if ref is null or Project does not exist
     * @example
     *
     * const ref = "507f1f77bcf86cd799439011";
     *
     * projects.getProject(ref)
     * .then(result => {
     *   console.log(result)             // returns the Project payload
     * }).catch(e => console.error(e))   // an error occurred
     */
    getProject(ref: string): Promise<GetProjectResponse>;
    /**
     * Update a Project.
     *
     * @param {UpdateProjectRequest} request - Request update of an Project
     * @param {string} request.ref - Required reference to the Project
     * @param {string} request.name - Value to rename the application to
     * @param {string} request.allowExperiments - Enables experimental APIs
     * @return {Promise<UpdateProjectResponse>}
     * @example
     *
     * const request = {
     *   name: "project001",
     *   ref: "507f1f77bcf86cd799439011"
     * }
     *
     * projects.updateProject(request)
     * .then(result => {
     *   console.log(result)            // returns the UpdateProjectResponse payload
     * }).catch(e => console.error(e))  // an error occurred
     */
    updateProject(request: UpdateProjectRequest): Promise<UpdateProjectResponse>;
    /**
     * Delete a Project.
     *
     * @param {string} ref - Project's reference
     * @example
     *
     * const ref = "507f1f77bcf86cd799439011"
     *
     * projects.deleteProject(ref)
     * .then(() => {
     *   console.log("done")            // returns a reference of the Project
     * }).catch(e => console.error(e))  // an error occurred
     */
    deleteProject(ref: string): Promise<DeleteProjectResponse>;
    /**
     * Generate a new accessKeySecret. Be sure to update your applications with the new value.
     *
     * @param {LoginRequest} request - Request update of an Project
     * @param {string} request.ref - Project's reference
     * @example
     *
     * const request = {
     *  ref: "507f1f77bcf86cd799439011"
     * }
     *
     * projects.renewAccessKeySecret(request)
     * .then(result => {
     *   console.log(result)            // returns the new accessKeySecret
     * }).catch(e => console.error(e))  // an error occurred
     */
    renewAccessKeySecret(request: RenewAccessKeySecretRequest): Promise<RenewAccessKeySecretResponse>;
}
export { ProjectsPB, CommonPB, IProjectsClient };
