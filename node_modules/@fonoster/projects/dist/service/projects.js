"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectsService = exports.default = void 0;
const projects_pb_1 = __importStar(require("./protos/projects_pb"));
const projects_grpc_pb_1 = require("./protos/projects_grpc_pb");
Object.defineProperty(exports, "ProjectsService", { enumerable: true, get: function () { return projects_grpc_pb_1.ProjectsService; } });
const common_pb_1 = require("./protos/common_pb");
const core_1 = require("@fonoster/core");
const assertions_1 = require("./assertions");
const errors_1 = require("@fonoster/errors");
const envs_1 = require("../envs");
const jwt_1 = __importDefault(require("@fonoster/auth/dist/utils/jwt"));
const auth_utils_1 = __importDefault(require("@fonoster/auth/dist/utils/auth_utils"));
const decoder_1 = __importDefault(require("./decoder"));
const bson_objectid_1 = __importDefault(require("bson-objectid"));
const encoder_1 = __importDefault(require("./encoder"));
class ProjectsServer {
    async createProject(call, callback) {
        try {
            (0, assertions_1.assertNotEmpty)("name", call.request.getName());
            const authenticator = new auth_utils_1.default(new jwt_1.default());
            const redis = (0, core_1.getRedisConnection)();
            // Prefixing Project's accessKeyID to avoid confusion with user accounts
            const ref = "PJ" + (0, bson_objectid_1.default)();
            const userRef = (0, core_1.getAccessKeyId)(call);
            const project = new projects_pb_1.default.Project();
            const result = await authenticator.createToken(ref, envs_1.APISERVER_JWT_AUTH_ISS, "PROJECT", envs_1.APISERVER_JWT_PRIVATE_KEY, "1y");
            project.setRef(ref);
            project.setAccessKeyId(ref);
            project.setUserRef(userRef);
            project.setAccessKeySecret(result.accessToken);
            project.setName(call.request.getName());
            project.setAllowExperiments(call.request.getAllowExperiments());
            project.setUpdateTime(new Date().toISOString());
            project.setCreateTime(new Date().toISOString());
            redis.set(ref, (0, encoder_1.default)(project));
            redis.sadd("u_" + userRef, ref);
            callback(null, project);
        }
        catch (e) {
            callback(e, null);
        }
    }
    async updateProject(call, callback) {
        try {
            const redis = (0, core_1.getRedisConnection)();
            const ref = call.request.getRef();
            const raw = await redis.get(ref);
            if (!raw)
                throw new errors_1.FonosterError("not found", errors_1.ErrorCodes.NOT_FOUND);
            const project = (0, decoder_1.default)(raw.toString());
            if ((0, core_1.getAccessKeyId)(call) !== project.getUserRef()) {
                throw new errors_1.FonosterError("permission denied", errors_1.ErrorCodes.PERMISSION_DENIED);
            }
            if (call.request.getName())
                project.setName(call.request.getName());
            // TODO: Make this parameter optional.
            project.setAllowExperiments(call.request.getAllowExperiments());
            project.setUpdateTime(new Date().toISOString());
            redis.set(ref, (0, encoder_1.default)(project));
            callback(null, project);
        }
        catch (e) {
            callback(e, null);
        }
    }
    async getProject(call, callback) {
        try {
            const redis = (0, core_1.getRedisConnection)();
            const ref = call.request.getRef();
            const raw = await redis.get(ref);
            if (!raw)
                throw new errors_1.FonosterError("not found", errors_1.ErrorCodes.NOT_FOUND);
            const project = (0, decoder_1.default)(raw.toString());
            if ((0, core_1.getAccessKeyId)(call) !== project.getUserRef()) {
                throw new errors_1.FonosterError("permission denied", errors_1.ErrorCodes.PERMISSION_DENIED);
            }
            callback(null, project);
        }
        catch (e) {
            callback(e, null);
        }
    }
    async deleteProject(call, callback) {
        try {
            const redis = (0, core_1.getRedisConnection)();
            const ref = call.request.getRef();
            const raw = await redis.get(ref);
            if (!raw)
                throw new errors_1.FonosterError("not found", errors_1.ErrorCodes.NOT_FOUND);
            const project = (0, decoder_1.default)(raw.toString());
            if ((0, core_1.getAccessKeyId)(call) !== project.getUserRef()) {
                throw new errors_1.FonosterError("permission denied", errors_1.ErrorCodes.PERMISSION_DENIED);
            }
            redis.del(project.getRef());
            redis.srem("u_" + project.getUserRef(), project.getRef());
            callback(null, new common_pb_1.Empty());
        }
        catch (e) {
            callback(e, null);
        }
    }
    async listProjects(call, callback) {
        try {
            const redis = (0, core_1.getRedisConnection)();
            const list = await redis.smembers("u_" + (0, core_1.getAccessKeyId)(call));
            const projects = await Promise.all(list.map(async (ref) => {
                const raw = (await redis.get(ref)).toString();
                return (0, decoder_1.default)(raw);
            }));
            const response = new projects_pb_1.ListProjectsResponse();
            response.setProjectsList(projects);
            callback(null, response);
        }
        catch (e) {
            callback(e, null);
        }
    }
    async renewAccessKeySecret(call, callback) {
        try {
            const authenticator = new auth_utils_1.default(new jwt_1.default());
            const redis = (0, core_1.getRedisConnection)();
            const ref = call.request.getRef();
            const raw = await redis.get(ref);
            if (!raw)
                throw new errors_1.FonosterError("not found", errors_1.ErrorCodes.NOT_FOUND);
            const project = (0, decoder_1.default)(raw.toString());
            if ((0, core_1.getAccessKeyId)(call) !== project.getUserRef()) {
                throw new errors_1.FonosterError("permission denied", errors_1.ErrorCodes.PERMISSION_DENIED);
            }
            const result = await authenticator.createToken(project.getAccessKeyId(), envs_1.APISERVER_JWT_AUTH_ISS, "PROJECT", envs_1.APISERVER_JWT_PRIVATE_KEY, "1y");
            project.setAccessKeySecret(result.accessToken);
            project.setUpdateTime(new Date().toISOString());
            redis.set(project.getRef(), (0, encoder_1.default)(project));
            const response = new projects_pb_1.RenewAccessKeySecretResponse();
            response.setAccessKeySecret(result.accessToken);
            callback(null, response);
        }
        catch (e) {
            callback(e, null);
        }
    }
}
exports.default = ProjectsServer;
