import { APIClient, ClientOptions } from "@fonoster/common";
import { App, CreateAppRequest, CreateAppResponse, DeleteAppResponse, GetAppResponse, IAppsClient, ListAppsRequest, ListAppsResponse, UpdateAppRequest, UpdateAppResponse } from "./types";
import AppsPB from "../service/protos/apps_pb";
import CommonPB from "../service/protos/common_pb";
/**
 * @classdesc Use Fonoster Apps, a capability of Fonoster Voice Subsystem,
 * to create, update, get and delete Voice Applications. Apps requires of a
 * running Fonoster deployment.
 *
 * @extends APIClient
 * @example
 *
 * const Fonoster = require("@fonoster/sdk")
 * const apps = new Fonoster.Apps()
 *
 * const request = {
 *   name: "My application",
 *   initialDtmf: "1234",
 *   speechConfig: {
 *     secretName: "my-secret",
 *     voice: "en-US-Wavenet-F"
 *   },
 *   intentsEngineConfig: {
 *     secretName: "my-secret",
 *     projectId: "my-project"
 *   }
 * }
 *
 * apps.createApp(request)
 * .then(result => {
 *   console.log(result)             // successful response
 * }).catch(e => console.error(e))   // an error occurred
 */
export default class Apps extends APIClient implements IAppsClient {
    /**
     * Constructs a new Apps object.
     *
     * @param {ClientOptions} options - Options to indicate the objects endpoint
     * @see module:core:APIClient
     */
    constructor(options?: ClientOptions);
    /**
     * Creates a new Agent on the SIP Proxy subsystem.
     *
     * @param {CreateAppRequest} request -  Request to create a new Voice Application
     * @param {string} request.name - The name of the application
     * @param {string} request.initialDtmf - Optional DTMF code to be sent at after answer the call
     * @param {string} request.activationIntentId - Optional intent id to "wake" the application. Similar to "Alexa!"
     * @param {number} request.activationTimeout - Time in seconds for the duration of the `AWAKE_ACTIVE` state,
     * set for the activation command. After this time the bot will return to `AWAKE_PASSIVE` and new intents will be ignored. Defaults to 15000
     * @param {number} request.interactionTimeout - Timeout, in seconds, to ask again for user input. Use -1 for no timeout. Defaults to -1
     * @param {boolean} request.enableEvents - If set to true it will send events to WS clients subscribed to events. Defaults to false
     * @param {TransferConfig} request.transferConfig - Transfer configuration object
     * @param {string} request.transferConfig.message - Optional message to play while transfering
     * @param {string} request.transferConfig.messageBusy - Optional message to play if callee is busy
     * @param {string} request.transferConfig.messageBusy - Optional message to play if callee does not answer
     * @param {SpeechConfig} request.speechConfig - Speech configuration. Value varies based on implementation
     * @param {IntentsEngineConfig} request.intentsEngineConfig - Intents Engine. Value varies based on implementation
     * @return {Promise<CreateAppResponse>}
     * @see GoogleSpeechConfig
     * @see DialogflowES
     * @see DialogflowCX
     * @example
     *
     * const request = {
     *   name: "My application",
     *   initialDtmf: "1234",
     *   speechConfig: {
     *     secretName: "my-secret",
     *     voice: "en-US-Wavenet-F"
     *   },
     *   intentsEngineConfig: {
     *     secretName: "my-secret",
     *     projectId: "my-project"
     *   }
     * }
     *
     * apps.createApp(request)
     * .then(result => {
     *   console.log(result)            // returns the CreateAppResponse interface
     * }).catch(e => console.error(e))  // an error occurred
     */
    createApp(request: CreateAppRequest): Promise<CreateAppResponse>;
    /**
     * Retrives a Voice Application by reference.
     *
     * @param {string} ref - Reference to Application
     * @return {Promise<GetAppResponse>} The Application
     * @throws if ref is null or App does not exist
     * @example
     *
     * const ref = "aynB1z0tzd";
     *
     * apps.getApp(ref)
     * .then(result => {
     *   console.log(result)             // returns the GetAppResponse interface
     * }).catch(e => console.error(e))   // an error occurred
     */
    getApp(ref: string): Promise<GetAppResponse>;
    /**
     * Update a Voice Application.
     *
     * @param {UpdateAppRequest} request -  Request to update an existing Voice Application
     * @param {string} request.ref - The reference of the application
     * @param {string} request.name - The name of the application
     * @param {string} request.initialDtmf - Optional DTMF code to be sent at after answer the call
     * @param {string} request.activationIntentId - Optional intent id to "wake" the application. Similar to "Alexa!"
     * @param {number} request.activationTimeout - Time in seconds for the duration of the `AWAKE_ACTIVE` state,
     * set for the activation command. After this time the bot will return to `AWAKE_PASSIVE` and new intents will be ignored. Defaults to 15000
     * @param {number} request.interactionTimeout - Timeout, in seconds, to ask again for user input. Use -1 for no timeout. Defaults to -1
     * @param {boolean} request.enableEvents - If set to true it will send events to WS clients subscribed to events. Defaults to false
     * @param {TransferConfig} request.transferConfig - Transfer configuration object
     * @param {string} request.transferConfig.message - Optional message to play while transfering
     * @param {string} request.transferConfig.messageBusy - Optional message to play if callee is busy
     * @param {string} request.transferConfig.messageBusy - Optional message to play if callee does not answer
     * @param {SpeechConfig} request.speechConfig - Speech configuration. Value varies based on implementation
     * @param {IntentsEngineConfig} request.intentsEngineConfig - Intents Engine configuration. Value varies based on implementation
     * @return {Promise<CreateAppResponse>}
     * @see GoogleSpeechConfig
     * @see DialogflowES
     * @see DialogflowCX
     * @example
     *
     * const request = {
     *   ref: "aynB1z0tzd",
     *   name: "My new application name",
     *   speechConfig: {
     *     secretName: "my-secret",
     *     voice: "en-US-Wavenet-F"
     *   },
     *   intentsEngineConfig: {
     *     secretName: "my-secret"
     *   }
     * }
     *
     * apps.updateApp(request)
     * .then(result => {
     *   console.log(result)            // returns the CreateAppResponse interface
     * }).catch(e => console.error(e))  // an error occurred
     */
    updateApp(request: UpdateAppRequest): Promise<UpdateAppResponse>;
    /**
     * List of Voice Applications in your Project.
     *
     * @param {ListAgentsRequest} request - Optional parameter with size and
     * token for the request
     * @param {number} request.pageSize - Elements per page
     * (defaults to 20)
     * @param {string} request.pageToken - The next_page_token value returned from
     * a previous List request, if any
     * @return {Promise<ListAppsResponse>} Paginated List of Applications
     * @example
     *
     * const request = {
     *    pageSize: 20,
     *    pageToken: 2
     * }
     *
     * apps.listApps(request)
     * .then(() => {
     *   console.log(result)            // returns a ListAppsResponse interface
     * }).catch(e => console.error(e))  // an error occurred
     */
    listApps(request: ListAppsRequest): Promise<ListAppsResponse>;
    /**
     * Deletes a Voice Application in your Project.
     *
     * @param {string} ref - Apps's reference
     * @example
     *
     * const ref = "aynB1z0tzd"
     *
     * apps.deleteApp(ref)
     * .then(() => {
     *   console.log("done")            // returns a reference of the Application
     * }).catch(e => console.error(e))  // an error occurred
     */
    deleteApp(ref: string): Promise<DeleteAppResponse>;
}
export { App, AppsPB, CommonPB, IAppsClient };
