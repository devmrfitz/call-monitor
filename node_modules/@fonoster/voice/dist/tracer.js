"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VoiceTracer = void 0;
/*
 * Copyright (C) 2022 by Fonoster Inc (https://fonoster.com)
 * http://github.com/fonoster/fonoster
 *
 * This file is part of Fonoster
 *
 * Licensed under the MIT License (the "License");
 * you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *    https://opensource.org/licenses/MIT
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const api_1 = __importDefault(require("@opentelemetry/api"));
const resources_1 = require("@opentelemetry/resources");
const semantic_conventions_1 = require("@opentelemetry/semantic-conventions");
const sdk_trace_base_1 = require("@opentelemetry/sdk-trace-base");
const { NodeTracerProvider } = require("@opentelemetry/sdk-trace-node");
class VoiceTracer {
    constructor(otlSpanExporters) {
        // Configure span processor to send spans to the exporter
        const provider = new NodeTracerProvider({
            resource: new resources_1.Resource({
                [semantic_conventions_1.SemanticResourceAttributes.SERVICE_NAME]: "voice-service"
            })
        });
        for (const exp of otlSpanExporters) {
            const exporter = new exp.exporter(exp.config);
            provider.addSpanProcessor(new sdk_trace_base_1.BatchSpanProcessor(exporter));
        }
        provider.register();
        this.callTracer = api_1.default.trace.getTracer("call_tracer");
    }
    init() {
        this.parentSpan = this.callTracer.startSpan("call");
        this.ctx = api_1.default.trace.setSpan(api_1.default.context.active(), this.parentSpan);
    }
    close() {
        this.parentSpan.end();
    }
    createSpan(name) {
        return this.callTracer.startSpan(name, undefined, this.ctx);
    }
}
exports.VoiceTracer = VoiceTracer;
