"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.serveFiles = exports.stopMediaTransfer = exports.startMediaTransfer = exports.objectToQString = void 0;
const path_1 = require("path");
const fs_1 = __importDefault(require("fs"));
/**
 * Takes a json object and creates a query formatted string
 *
 * @param {object} - a one level json object with the query options
 * @return {string} a string in the form of 'key1=value1&key2=value2&...'
 */
const objectToQString = (obj = {}) => Object.keys(obj)
    .filter((key) => obj[key])
    .map((key) => {
    const encodedObj = obj[key] === "#" ? encodeURIComponent("#") : obj[key];
    return `${key}=${encodedObj}`;
})
    .join("&");
exports.objectToQString = objectToQString;
async function sendMediaTransferEvent(verb, sessionId, event) {
    await verb.post(`events/user/${event}`, (0, exports.objectToQString)({
        // WARNING: Harcoded value
        application: "mediacontroller"
    }), {
        variables: {
            sessionId
        }
    });
}
async function startMediaTransfer(verb, sessionId) {
    await sendMediaTransferEvent(verb, sessionId, "SendExternalMedia");
}
exports.startMediaTransfer = startMediaTransfer;
async function stopMediaTransfer(verb, sessionId) {
    await sendMediaTransferEvent(verb, sessionId, "StopExternalMedia");
}
exports.stopMediaTransfer = stopMediaTransfer;
const serveFiles = (config) => {
    return (req, res) => {
        // TODO: Update to use a stream instead of fs.readFile
        fs_1.default.readFile((0, path_1.join)(config.pathToFiles, req.params.file), function (err, data) {
            if (err) {
                res.send("unable to find or open file");
            }
            else {
                // TODO: Set this value according to file extension
                res.setHeader("content-type", "audio/x-wav");
                res.send(data);
            }
            res.end();
        });
    };
};
exports.serveFiles = serveFiles;
