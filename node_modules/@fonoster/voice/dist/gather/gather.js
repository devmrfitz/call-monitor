"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const deepmerge_1 = __importDefault(require("deepmerge"));
const asserts_1 = require("../asserts");
const verb_1 = require("../verb");
const source_dtmf_1 = __importDefault(require("./source_dtmf"));
const source_speech_1 = __importDefault(require("./source_speech"));
const logger_1 = __importDefault(require("@fonoster/logger"));
const defaultOptions = {
    finishOnKey: "#",
    source: "dtmf"
};
class GatherVerb extends verb_1.Verb {
    constructor(request, speechProvider) {
        super(request);
        this.speechProvider = speechProvider;
    }
    async run(opts) {
        const options = (0, deepmerge_1.default)(defaultOptions, opts);
        // assertsHasNumDigitsOrTimeout(options);
        // assertsValuesIsZeroOrGreater("timeout", options.timeout);
        (0, asserts_1.assertsValueIsPositive)("numDigits", options.numDigits);
        (0, asserts_1.assertsFinishOnKeyIsChar)(options.finishOnKey);
        options.timeout =
            !options.timeout && options.source.includes("speech")
                ? 10000
                : options.timeout || 4000;
        return new Promise(async (resolve, reject) => {
            logger_1.default.verbose(`@fonoster/voice started gather [source = ${options.source}]`);
            if (options.source.includes("dtmf")) {
                (0, source_dtmf_1.default)(this.request.sessionId, options)
                    .then(resolve)
                    .catch(reject);
            }
            // TODO: We should explicitly clean this resources if the
            // other "source" already resolved the request.
            if (options.source.includes("speech")) {
                (0, source_speech_1.default)(this.request.sessionId, options, super.getSelf(), this.speechProvider)
                    .then(resolve)
                    .catch(reject);
            }
        });
    }
}
exports.default = GatherVerb;
