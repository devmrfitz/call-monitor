"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (C) 2022 by Fonoster Inc (https://fonoster.com)
 * http://github.com/fonoster/fonoster
 *
 * This file is part of Fonoster
 *
 * Licensed under the MIT License (the "License");
 * you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *    https://opensource.org/licenses/MIT
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const stream_1 = require("stream");
const pubsub_js_1 = __importDefault(require("pubsub-js"));
class StreamData {
    constructor() {
        this.stream = new stream_1.Stream();
    }
    close() {
        if (this.dtmfSubscribeToken) {
            pubsub_js_1.default.unsubscribe(this.dtmfSubscribeToken);
        }
        if (this.speechSubscribeToken) {
            pubsub_js_1.default.unsubscribe(this.speechSubscribeToken);
        }
        this.stream.removeAllListeners();
    }
    on(event, callback) {
        if (event === "transcript") {
            this.stream.on("transcript", (data) => {
                callback(data);
            });
        }
        if (event === "dtmf") {
            this.stream.on("dtmf", (key) => {
                callback(key);
            });
        }
        if (event === "error") {
            this.stream.on("error", (error) => {
                callback(error);
            });
        }
    }
    emit(event, data) {
        this.stream.emit(event, data);
    }
    setDtmfSubscribeToken(token) {
        this.dtmfSubscribeToken = token;
    }
    setSpeechSubscribeToken(token) {
        this.speechSubscribeToken = token;
    }
}
exports.default = StreamData;
