"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (C) 2022 by Fonoster Inc (https://fonoster.com)
 * http://github.com/fonoster/fonoster
 *
 * This file is part of Fonoster
 *
 * Licensed under the MIT License (the "License");
 * you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *    https://opensource.org/licenses/MIT
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const logger_1 = __importDefault(require("@fonoster/logger"));
const pubsub_js_1 = __importDefault(require("pubsub-js"));
const utils_1 = require("../utils");
const verb_1 = require("../verb");
const asserts_1 = require("./asserts");
class DtmfVerb extends verb_1.Verb {
    async run(opts) {
        logger_1.default.verbose(`@fonoster/voice sending dtmf request [sessionId = ${this.request.sessionId}, opts = ${JSON.stringify(opts)}]`);
        (0, asserts_1.assertsHasDtmf)(opts);
        return new Promise(async (resolve, reject) => {
            let token;
            try {
                token = pubsub_js_1.default.subscribe(`SendDtmfFinished.${this.request.sessionId}`, (type, data) => {
                    resolve();
                    pubsub_js_1.default.unsubscribe(token);
                });
                await super.post("events/user/SendDtmf", (0, utils_1.objectToQString)({
                    // WARNING: Harcoded value
                    application: "mediacontroller"
                }), {
                    variables: {
                        sessionId: this.request.sessionId,
                        dtmf: opts.dtmf
                    }
                });
            }
            catch (e) {
                reject(e);
                pubsub_js_1.default.unsubscribe(token);
            }
        });
    }
}
exports.default = DtmfVerb;
