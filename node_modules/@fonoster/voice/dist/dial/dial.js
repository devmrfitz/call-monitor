"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (C) 2022 by Fonoster Inc (https://fonoster.com)
 * http://github.com/fonoster/fonoster
 *
 * This file is part of Fonoster
 *
 * Licensed under the MIT License (the "License");
 * you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *    https://opensource.org/licenses/MIT
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const pubsub_js_1 = __importDefault(require("pubsub-js"));
const logger_1 = __importDefault(require("@fonoster/logger"));
const utils_1 = require("../utils");
const verb_1 = require("../verb");
const status_stream_1 = __importDefault(require("./status_stream"));
class DialVerb extends verb_1.Verb {
    async run(destination, options = {}) {
        const streamStatus = new status_stream_1.default();
        logger_1.default.verbose(`@fonoster/voice dialing [sessionId = ${this.request.sessionId}, number = ${this.request.number}]`);
        // We should reject if DialFailed
        return new Promise(async (resolve, reject) => {
            let dialFailedToken;
            let statusChangeToken;
            try {
                statusChangeToken = pubsub_js_1.default.subscribe(`DialStatusChanged.${this.request.sessionId}`, (type, d) => {
                    if (d.data.status === "trying") {
                        resolve(streamStatus);
                    }
                    else {
                        streamStatus.emit(d.data.status, d.data);
                    }
                });
                dialFailedToken = pubsub_js_1.default.subscribe(`DialFailed.${this.request.sessionId}`, (type, data) => {
                    reject(data.error);
                    pubsub_js_1.default.unsubscribe(dialFailedToken);
                    pubsub_js_1.default.unsubscribe(statusChangeToken);
                });
                await super.post("events/user/Dial", (0, utils_1.objectToQString)({
                    // WARNING: Harcoded value
                    application: "mediacontroller"
                }), {
                    variables: {
                        accessKeyId: this.request.accessKeyId,
                        sessionId: this.request.sessionId,
                        // Could be a Number or an Agent
                        destination,
                        number: this.request.number,
                        timeout: options.timeout || -1,
                        record: options.record
                    }
                });
            }
            catch (e) {
                reject(e);
                pubsub_js_1.default.unsubscribe(dialFailedToken);
            }
        });
    }
}
exports.default = DialVerb;
