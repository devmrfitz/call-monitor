"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CallManagerServer = exports.CallManagerService = exports.default = void 0;
const core_1 = require("@fonoster/core");
const errors_1 = require("@fonoster/errors");
const callmanager_grpc_pb_1 = require("./protos/callmanager_grpc_pb");
Object.defineProperty(exports, "CallManagerService", { enumerable: true, get: function () { return callmanager_grpc_pb_1.CallManagerService; } });
const envs_1 = require("./envs");
const call_1 = __importDefault(require("./call"));
const ari_client_1 = __importDefault(require("ari-client"));
const logger_1 = __importDefault(require("@fonoster/logger"));
const getDomainByNumber = async (e164Number) => {
    await core_1.routr.connect();
    return await core_1.routr.getDomainUriFromNumber(e164Number);
};
const numberNotInList = (number) => `the number '${number}' is not assigned to one of your domains. Make sure the number exist and is assigned to a Domain`;
class CallManagerServer {
    async call(call, callback) {
        logger_1.default.verbose(`@core/callmanager call [from ${call.request.getFrom()}]`);
        const domain = await getDomainByNumber(call.request.getFrom());
        if (!domain) {
            callback(new errors_1.FonosterError(numberNotInList(call.request.getFrom())), null);
            return;
        }
        logger_1.default.verbose(`@core/callmanager call [domain ${JSON.stringify(domain)}]`);
        const domainUri = domain.spec.context.domainUri;
        const accessKeyId = call.metadata.get("access_key_id")[0];
        const accessKeyIdDomain = domain.metadata.accessKeyId;
        if (accessKeyIdDomain != accessKeyId) {
            callback(new errors_1.FonosterError(numberNotInList(call.request.getFrom())), null);
        }
        logger_1.default.verbose(`@core/callmanager call [ari url ${envs_1.APISERVER_ASTERISK_ARI_INTERNAL_URL}]`);
        logger_1.default.verbose(`@core/callmanager call [ari username ${envs_1.APISERVER_ASTERISK_ARI_USERNAME}]`);
        logger_1.default.verbose(`@core/callmanager call [endpoint ${envs_1.APISERVER_ASTERISK_TRUNK}/${envs_1.APISERVER_ASTERISK_CONTEXT}/${envs_1.APISERVER_ASTERISK_EXTENSION}]`);
        try {
            const epInfo = {
                domain: domainUri,
                trunk: envs_1.APISERVER_ASTERISK_TRUNK,
                context: envs_1.APISERVER_ASTERISK_CONTEXT,
                extension: envs_1.APISERVER_ASTERISK_EXTENSION
            };
            const conn = await ari_client_1.default.connect(envs_1.APISERVER_ASTERISK_ARI_INTERNAL_URL, envs_1.APISERVER_ASTERISK_ARI_USERNAME, envs_1.APISERVER_ASTERISK_ARI_SECRET);
            const channel = conn.Channel();
            callback(null, await (0, call_1.default)(call.request, channel, epInfo));
        }
        catch (e) {
            callback(e, null);
        }
    }
}
exports.default = CallManagerServer;
exports.CallManagerServer = CallManagerServer;
