"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (C) 2023 by Fonoster Inc (https://fonoster.com)
 * http://github.com/fonoster/fonoster
 *
 * This file is part of Fonoster
 *
 * Licensed under the MIT License (the "License");
 * you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *    https://opensource.org/licenses/MIT
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const callmanager_pb_1 = require("./protos/callmanager_pb");
const nanoid_1 = require("nanoid");
const assertions_1 = require("./assertions");
async function default_1(request, channel, endpointInfo) {
    (0, assertions_1.assertCompatibleParameters)(request);
    if (!request.getIgnoreE164Validation())
        (0, assertions_1.assertIsE164)(request.getFrom(), "from");
    if (!request.getIgnoreE164Validation())
        (0, assertions_1.assertIsE164)(request.getFrom(), "to");
    if (request.getWebhook())
        (0, assertions_1.assertWebhookIsURL)(request.getWebhook());
    const response = new callmanager_pb_1.CallResponse();
    response.setRef((0, nanoid_1.nanoid)());
    await channel.originate({
        context: endpointInfo.context,
        extension: endpointInfo.extension,
        endpoint: `PJSIP/${endpointInfo.trunk}/sip:${request.getTo()}@${endpointInfo.domain}`,
        variables: {
            DID_INFO: request.getFrom(),
            REF: response.getRef(),
            METADATA: request.getMetadata(),
            WEBHOOK: request.getWebhook(),
            APP_REF: request.getAppRef()
        }
    });
    return response;
}
exports.default = default_1;
