"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsersService = exports.default = void 0;
const users_pb_1 = __importStar(require("./protos/users_pb"));
const users_grpc_pb_1 = require("./protos/users_grpc_pb");
Object.defineProperty(exports, "UsersService", { enumerable: true, get: function () { return users_grpc_pb_1.UsersService; } });
const core_1 = require("@fonoster/core");
const common_pb_1 = require("./protos/common_pb");
const assertions_1 = require("./assertions");
const errors_1 = require("@fonoster/errors");
const errors_2 = require("@fonoster/errors");
const types_1 = require("./types");
const envs_1 = require("../envs");
const auth_utils_1 = __importDefault(require("@fonoster/auth/dist/utils/auth_utils"));
const jwt_1 = __importDefault(require("@fonoster/auth/dist/utils/jwt"));
const logger_1 = __importDefault(require("@fonoster/logger"));
const bcrypt_1 = __importDefault(require("bcrypt"));
const bson_objectid_1 = __importDefault(require("bson-objectid"));
const encoder_1 = __importDefault(require("./encoder"));
const decoder_1 = __importDefault(require("./decoder"));
const authenticator = new auth_utils_1.default(new jwt_1.default());
// TODO: Move to commons or core
async function getTokenRole(token) {
    try {
        const jwt = new jwt_1.default();
        const payload = (await jwt.decode(token, envs_1.APISERVER_JWT_PRIVATE_KEY));
        return payload.role;
    }
    catch (e) {
        return null;
    }
}
class UsersServer {
    async listUsers(call, callback) {
        try {
            const redis = (0, core_1.getRedisConnection)();
            const role = await getTokenRole((0, core_1.getAccessKeySecret)(call));
            const accessKeyId = (0, core_1.getAccessKeyId)(call);
            const list = await redis.smembers("fn_users");
            const emailFilter = call.request.getFiltersMap().get("email");
            const users = await Promise.all(list.map(async (ref) => {
                const raw = (await redis.get(ref)).toString();
                const asObj = (0, decoder_1.default)(raw);
                if (emailFilter && emailFilter !== asObj.getEmail()) {
                    return;
                }
                if (accessKeyId === asObj.getAccessKeyId() ||
                    role === "SERVICE" ||
                    role === "ADMIN") {
                    return asObj;
                }
            }));
            const response = new users_pb_1.ListUsersResponse();
            response.setUsersList(users[0] ? users : []);
            callback(null, response);
        }
        catch (e) {
            callback(e, null);
        }
    }
    async createUser(call, callback) {
        try {
            (0, assertions_1.assertNotEmpty)("name", call.request.getName());
            (0, assertions_1.assertNotEmpty)("secret", call.request.getSecret());
            (0, assertions_1.assertValidEmail)(call.request.getEmail());
            (0, assertions_1.assertValidURL)(call.request.getAvatar());
            const redis = (0, core_1.getRedisConnection)();
            const emailExist = await redis.get(call.request.getEmail());
            if (emailExist) {
                throw new errors_1.FonosterError("user already exist", errors_2.ErrorCodes.ALREADY_EXISTS);
            }
            const ref = "US" + (0, bson_objectid_1.default)();
            const user = new users_pb_1.default.User();
            user.setRef(ref);
            user.setAccessKeyId(ref);
            user.setName(call.request.getName());
            user.setEmail(call.request.getEmail());
            user.setAvatar(call.request.getAvatar());
            user.setUpdateTime(new Date().toISOString());
            user.setCreateTime(new Date().toISOString());
            user.setStatus(types_1.UserStatus.ACTIVE);
            user.setLimiter(types_1.UserLimiter.DEFAULT);
            // TODO: Apply strong cypher
            const secretHash = await bcrypt_1.default.hash(call.request.getSecret(), 10);
            redis.set(ref, (0, encoder_1.default)(user, secretHash));
            redis.set(call.request.getEmail(), ref);
            redis.sadd("fn_users", ref);
            callback(null, user);
        }
        catch (e) {
            callback(e, null);
        }
    }
    async updateUser(call, callback) {
        try {
            const redis = (0, core_1.getRedisConnection)();
            const role = await getTokenRole((0, core_1.getAccessKeySecret)(call));
            const ref = call.request.getRef();
            const raw = await redis.get(ref);
            if (!raw)
                throw new errors_1.FonosterError("not found", errors_2.ErrorCodes.NOT_FOUND);
            let secretHash = JSON.parse(raw.toString()).secretHash;
            const user = (0, decoder_1.default)(raw);
            if (call.request.getName())
                user.setName(call.request.getName());
            if (call.request.getSecret()) {
                secretHash = await bcrypt_1.default.hash(call.request.getSecret(), 10);
            }
            if (call.request.getAvatar()) {
                (0, assertions_1.assertValidURL)(call.request.getAvatar());
                user.setAvatar(call.request.getAvatar());
            }
            if (call.request.getStatus()) {
                if (role === "SERVICE" || role === "ADMIN") {
                    user.setStatus(call.request.getStatus());
                }
                else {
                    throw new errors_1.FonosterError("not authorized", errors_2.ErrorCodes.PERMISSION_DENIED);
                }
            }
            if (call.request.getLimiter()) {
                if (role === "SERVICE" || role === "ADMIN") {
                    user.setLimiter(call.request.getLimiter());
                }
                else {
                    throw new errors_1.FonosterError("not authorized", errors_2.ErrorCodes.PERMISSION_DENIED);
                }
            }
            user.setUpdateTime(new Date().toISOString());
            redis.set(ref, (0, encoder_1.default)(user, secretHash));
            callback(null, user);
        }
        catch (e) {
            callback(e, null);
        }
    }
    async getUser(call, callback) {
        try {
            const accessKeyId = (0, core_1.getAccessKeyId)(call);
            if (accessKeyId !== call.request.getRef()) {
                throw new errors_1.FonosterError("permission denied", errors_2.ErrorCodes.PERMISSION_DENIED);
            }
            const redis = (0, core_1.getRedisConnection)();
            // Get result here
            const raw = await redis.get(call.request.getRef());
            if (!raw)
                throw new errors_1.FonosterError("not found", errors_2.ErrorCodes.NOT_FOUND);
            const user = (0, decoder_1.default)(raw.toString());
            callback(null, user);
        }
        catch (e) {
            callback(e, null);
        }
    }
    async deleteUser(call, callback) {
        try {
            const redis = (0, core_1.getRedisConnection)();
            const raw = await redis.get(call.request.getRef());
            if (!raw)
                throw new errors_1.FonosterError("not found", errors_2.ErrorCodes.NOT_FOUND);
            const user = (0, decoder_1.default)(raw.toString());
            await redis.del(user.getRef());
            await redis.del(user.getEmail());
            // TODO: Also unlink all of the User's projects
            callback(null, new common_pb_1.Empty());
        }
        catch (e) {
            callback(e, null);
        }
    }
    async createUserCredentials(call, callback) {
        try {
            logger_1.default.verbose(`@fonoster/auth creating token [email is ${call.request.getEmail()}]`);
            const redis = (0, core_1.getRedisConnection)();
            const ref = await redis.get(call.request.getEmail());
            // Compare the value send with the value stored
            if (!ref) {
                throw new errors_1.FonosterError("invalid credentials", errors_2.ErrorCodes.PERMISSION_DENIED);
            }
            const raw = await redis.get(ref);
            if (!raw)
                throw new errors_1.FonosterError("not found", errors_2.ErrorCodes.NOT_FOUND);
            const user = JSON.parse(raw.toString());
            if (!bcrypt_1.default.compareSync(call.request.getSecret(), user.secretHash)) {
                throw new errors_1.FonosterError("invalid credentials", errors_2.ErrorCodes.PERMISSION_DENIED);
            }
            const result = await authenticator.createToken(user.accessKeyId, envs_1.APISERVER_JWT_AUTH_ISS, "USER", envs_1.APISERVER_JWT_PRIVATE_KEY, call.request.getExpiration() || "30d");
            const response = new users_pb_1.CreateUserCredentialsResponse();
            response.setAccessKeyId(user.accessKeyId);
            response.setAccessKeySecret(result.accessToken);
            callback(null, response);
        }
        catch (e) {
            callback(e, null);
        }
    }
}
exports.default = UsersServer;
