import { APIClient, ClientOptions } from "@fonoster/common";
import UsersPB from "../service/protos/users_pb";
import CommonPB from "../service/protos/common_pb";
import { CreateUserRequest, CreateUserResponse, DeleteUserResponse, GetUserResponse, CreateUserCredentialsRequest, UpdateUserRequest, UpdateUserResponse, CreateUserCredentialsResponse, IUsersClient, ListUsersRequest, ListUsersResponse, User } from "./types";
/**
 * @classdesc Use Fonoster Users, a capability of Fonoster,
 * to create, update, get and delete Users. Users requires of a
 * running Fonoster deployment.
 *
 * @extends APIClient
 * @example
 *
 * const Fonoster = require("@fonoster/sdk")
 * const users = new Fonoster.Users()
 *
 * const request = {
 *   email: "john.doe@email.com",
 *   name: "John Doe",
 *   secret: "s3cur3pass",
 *   avatar: "https://avatar.com/avt?userId=2124252"
 * }
 *
 * users.createUser(request)
 * .then(result => {
 *   console.log(result)             // successful response
 * }).catch(e => console.error(e))   // an error occurred
 */
export default class Users extends APIClient implements IUsersClient {
    /**
     * Constructs a new Users object.
     *
     * @param {ClientOptions} options - Options to indicate the objects endpoint
     * @see module:core:APIClient
     */
    constructor(options?: ClientOptions);
    /**
     * Return a list of Users.
     *
     * @param {ListUsersRequest} request - Request filters
     * @param {string} request.email - Optional email filter
     * @return {Promise<ListUsersResponse>}
     * @example
     *
     * projects.listUsers({ email: "john.doe@email.com" })
     * .then(result => {
     *   console.log(result)             // successful response
     * }).catch(e => console.error(e))   // an error occurred
     */
    listUsers(request?: ListUsersRequest): Promise<ListUsersResponse>;
    /**
     * Create a new Fonoster User.
     *
     * @param {CreateUserRequest} request -  Request for the provision of a new User
     * @param {string} request.email - User's email
     * @param {string} request.name - User's full name
     * @param {string} request.secret - Login password
     * @param {string} request.avatar - Optional URL to User's avatar
     * @return {Promise<CreateUserResponse>}
     * @example
     *
     * const request = {
     *   email: "john.doe@email.com",
     *   name: "John Doe",
     *   secret: "s3cur3pass",
     *   avatar: "https://avatar.com/avt?userId=2124252"
     * }
     *
     * users.createUser(request)
     * .then(result => {
     *   console.log(result)             // successful response
     * }).catch(e => console.error(e))   // an error occurred
     */
    createUser(request: CreateUserRequest): Promise<CreateUserResponse>;
    /**
     * Retrives an User by reference.
     *
     * @param {string} ref - Reference to User
     * @return {Promise<GetUserResponse>} The User
     * @throws if ref is null or User does not exist
     * @example
     *
     * const ref = "507f1f77bcf86cd799439011";
     *
     * users.getUser(ref)
     * .then(result => {
     *   console.log(result)             // returns the User payload
     * }).catch(e => console.error(e))   // an error occurred
     */
    getUser(ref: string): Promise<GetUserResponse>;
    /**
     * Update a Fonoster User.
     *
     * @param {UpdateUserRequest} request - Request update of an User
     * @param {string} request.ref - Required reference to the User
     * @param {string} request.name - Optionally update the name
     * @param {string} request.avatar - Optionally update the avatar
     * @param {string} request.secret - Optionally update User's password
     * @return {Promise<UpdateUserResponse>}
     * @example
     *
     * const request = {
     *   name: "John Dee",
     *   secret: "s3cur3pass"
     * }
     *
     * users.updateUser(request)
     * .then(result => {
     *   console.log(result)            // returns the UpdateUserResponse payload
     * }).catch(e => console.error(e))  // an error occurred
     */
    updateUser(request: UpdateUserRequest): Promise<UpdateUserResponse>;
    /**
     * Delete an Fonoster User.
     *
     * @param {string} ref - User's reference
     * @example
     *
     * const ref = "507f1f77bcf86cd799439011"
     *
     * users.deleteUser(ref)
     * .then(() => {
     *   console.log("done")            // returns a reference of the User
     * }).catch(e => console.error(e))  // an error occurred
     */
    deleteUser(ref: string): Promise<DeleteUserResponse>;
    /**
     * Login using email and a password.
     *
     * @param {createUserCredentials} request - Request update of an User
     * @param {string} request.email - Login username
     * @param {string} request.secret - Login password
     * @example
     *
     * const request = {
     *  email: "john.doe@email.com",
     *  secret: "s3cur3pass",
     *  expiration: "30d"
     * }
     *
     * users.createUserCredentials(request)
     * .then(result => {
     *   console.log(result)            // returns an accessKeyId and accessKeySecret
     * }).catch(e => console.error(e))  // an error occurred
     */
    createUserCredentials(request: CreateUserCredentialsRequest): Promise<CreateUserCredentialsResponse>;
}
export { User, UsersPB, CommonPB, IUsersClient };
